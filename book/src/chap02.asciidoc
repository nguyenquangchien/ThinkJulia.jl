[[chap02]]
== Biến, biểu thức và câu lệnh

Một trong những tính năng mạnh nhất của một ngôn ngữ lập trình là khả năng thao tác với các _biến_. Biến là một tên gọi tham chiếu đến một giá trị.
(((biến)))(((giá trị)))


=== Lệnh gán

Một _lệnh gán_ tạo ra biến mới và đặt giá trị cho nó:
(((lệnh gán)))((("lệnh", "gán", see="lệnh gán")))(((pass:[=], see="lệnh gán")))(((pi)))((("π", see="pi")))

[source,@julia-repl-test chap02]
----
julia> message = "And now for something completely different"
"And now for something completely different"
julia> n = 17
17
julia> π_val = 3.141592653589793
3.141592653589793
----

Ví dụ này có ba lệnh gán. Lệnh thứ nhất gán một chuỗi cho một biến có tên là +message+; lệnh thứ hai gán số nguyên +17+ cho +n+; lệnh thứ ba gán giá trị (gần đúng) của latexmath:[\(\pi\)] cho +π_val+ (*+\pi TAB+*).

Một cách chung để biểu diễn các biến trên giấy là viết ra tên kèm theo một mũi tên chỉ đến giá trị của biến. Dạng hình vẽ này được gọi là _sơ đồ trạng thái_ vì nó cho thấy trạng thái của mỗi biến hiện tại là như thế nào (hãy hình dung nó như trạng thái tư duy của biến đó).  <<fig02-1>> cho thấy kết quả của ví dụ trước.
(((sơ đồ trạng thái)))((("sơ đồ", "trạng thái", see="sơ đồ trạng thái")))

[[fig02-1]]
.Sơ đồ trạng thái
image::images/fig21.svg[]


=== Tên biến
(((biến)))

Thông thường các lập trình viên chọn tên biến có nghĩa— tự nó nói lên rằng biến được dùng vào việc gì.

Tên biến có độ dài tuỳ ý. Chúng có thể gồm hầu hết các kí tự Unicode (xem <<characters>>), nhưng chúng không thể bắt đầu bằng chữ số.  Dùng các chữ in cũng được, nhưng theo thông lệ thì bạn chỉ viết tên biến bằng chữ thường.

Bạn có thể nhập các kí tự Unicode bằng cách ấn tab để điền đầy đủ các chữ viết tắt tựa LaTeX vào trong REPL của Julia.
(((Unicode character)))

Kí tự nối chân, +_+, có thể xuất hiện trong một tên. Nó thường được dùng trong các tên gồm có nhiều từ, như +your_name+ hay +airspeed_of_unladen_swallow+.
(((kí tự nối chân)))(((viết tắt tựa LaTeX)))

Nếu bạn đặt một tên biến không hợp lệ, sẽ có lỗi cú pháp:
(((syntax error)))((("error", "syntax", see="syntax error")))

[source,jlcon]
----
julia> 76trombones = "big parade"
ERROR: syntax: "76" is not a valid function argument name
julia> more@ = 1000000
ERROR: syntax: extra token "@" after end of expression
julia> struct = "Advanced Theoretical Zymurgy"
ERROR: syntax: unexpected "="
----

+76trombones+ không hợp lệ vì nó bắt đầu bằng một số. +more@+ không hợp lệ vì nó có chứa một kí tự không hợp lệ, +@+. Nhưng còn +struct+ tại sao lại sai?

Hoá ra vì +struct+ là một trong những _từ khoá_ của Julia. REPL sử dụng từ khoá để nhận ra cấu trúc của chương trình, và chúng không thể được dùng để đặt tên biến.
(((keyword)))

Julia có những từ khóa dưới đây:

----
abstract type    baremodule   begin      break       catch
const            continue     do         else        elseif      
end              export       finally    for         function
global           if           import     importall   in         
let              local        macro      module      mutable struct
primitive type   quote        return     try         using            
struct           where        while
----

Bạn không cần phải ghi nhớ danh sách này. Hầu hết các môi trường phát triển đều hiển thị từ khóa bằng màu chữ khác; vì vậy bạn sẽ biết ngay nếu cố thử dùng một từ khóa làm tên biến.


=== Biểu thức và câu lệnh

_Biểu thức_ là một tổ hợp các giá trị, biến, và toán tử. Một giá trị bản thân nó cũng được coi như là một biểu thức, và một biến cũng vậy; vì thế tất cả những cái dưới đây đều là các biểu thức hợp lệ:
(((biểu thức)))

[source,@julia-repl-test chap02]
----
julia> 42
42
julia> n
17
julia> n + 25
42
----

Nếu bạn gõ một biểu thức vào dấu nhắc, REPL sẽ _ước lượng_ nó, nghĩa là tìm giá trị của biểu thức này. Ở ví dụ trên, +n+ có giá trị 17 còn +n + 25+ có giá trị 42.
(((ước lượng)))

_Câu lệnh_ là một đơn vị của mã lệnh mà có một hiệu ứng, nhưng tạo ra biến mới hoặc hiển thị một giá trị.
(((câu lệnh)))

[source,@julia-repl-test chap02]
----
julia> n = 17
17
julia> println(n)
17
----

Dòng thứ nhất là một lệnh gán để cấp một giá trị cho +n+. Dòng thứ hai là một lệnh print để hiển thị giá trị của +n+.

Khi bạn gõ một câu lệnh, REPL sẽ _thực thi_ nó, nghĩa là làm mọi việc mà câu lệnh này nêu ra.
(((thực thi)))


=== Chế độ văn lệnh

Đến bây giờ ta đã chạy Julia ở _chế độ tương tác_, nghĩa là bạn tương tác trực tiếp với REPL. Khi mới bắt đầu thì dùng chế độ tương tác cũng tốt thôi, nhưng nếu phải làm việc với nhiều hơn là vài dòng lệnh thì bạn sẽ thấy lủng củng ngay.
(((chế độ tương tác)))

Một cách khác là lưu mã lệnh bạn viết vào một file gọi là _văn lệnh_ rồi chạy Julia trong _chế độ văn lệnh_ để thực thi văn lệnh này. Theo quy ước, các văn lệnh Julia có tên kết thúc bằng _.jl_.
(((văn lệnh)))(((chế độ văn lệnh)))

Nếu bạn biết cách tạo một văn lệnh rồi chạy nó trên máy của mình bạn đã sẵn sàng tiếp tục. Nếu không, tôi khuyên bạn lại dùng JuliaBox. Hãy mở một file chữ, viết văn lệnh vào đó rồi lưu file với đuôi _.jl_. Ta có thể thực hiện văn lệnh này trong cửa sổ dòng lệnh với lệnh *+julia tên_văn_lệnh.jl+*.
(((đuôi file, .jl)))(((JuliaBox)))

Vì Julia có sẵn cả hai chế độ nên bạn có thể kiểm thử từng đoạn mã lệnh bằng chế độ tương tác trước khi đặt chúng vào văn lệnh. Nhưng lại có những khác biệt giữa chế độ tương tác và chế độ văn lệnh mà có thể gây nhầm lẫn.

Chẳng hạn, nếu dùng Julia như máy tính tay, bạn có thể gõ vào:

[source,@julia-repl-test]
----
julia> miles = 26.2
26.2
julia> miles * 1.61
42.182
----

Dòng đầu tiên gán một giá trị vào +miles+ rồi hiển thị giá trị. Dòng thứ hai là một biểu thức, do đó REPL ước lượng nó rồi hiển thị kết quả. Một đường chạy marathon có cự li khoảng 42 kilômet.

Nhưng nếu bạn cũng gõ mã lệnh này vào một văn lệnh rồi chạy nó thì sẽ không thu được kết quả đầu ra nào hết. Trong chế độ văn lệnh, bản thân một biểu thức không có hiệu ứng hiển thị. Thực ra Julia đã ước lượng biểu thức rồi nhưng sẽ không hiển thị kết quả cho đến tận khi bạn yêu cầu nó làm vậy:

[source,julia]
----
miles = 26.2
println(miles * 1.61)
----

Động thái này thoạt đầu có thể gây nhầm lẫn.

Một văn lệnh thường chứa một loạt các câu lệnh. Nếu có nhiều câu lệnh thì kết quả sẽ xuất hiện lần lượt khi các câu lệnh được thực thi.

Chẳng hạn, văn lệnh

[source,julia]
----
println(1)
x = 2
println(x)
----

cho ra kết quả

[source,@julia-eval]
----
println(1)
x = 2
println(x)
----

Câu lệnh gán thì không cho ra kết quả nào.

===== Bài tập 2-1

Để kiểm tra xem bạn đã hiểu chưa, hãy gõ những lệnh sau vào Julia REPL rồi xem chúng làm gì:

[source,julia]
----
5
x = 5
x + 1
----

Bây giờ hãy đặt vẫn những câu lệnh này vào một văn lệnh rồi chạy nó. Kết quả cho ra là gì? Hãy thay đổi văn lệnh bằng cách chuyển từng biểu thức thành lệnh print rồi chạy lại.

=== Thứ tự ưu tiên toán tử

Khi trong biểu thức có nhiều hơn một toán tử, thứ tự ước lượng sẽ tuân theo mức _ưu tiên toán tử_. Với các toán tử toán học, Python dựa vào quy ước chung trong môn toán. Chữ viết tắt _PEMDAS_ là một cách nhớ quy tắc này:
(((ưu tiên toán tử)))(((PEMDAS)))

* __P__arentheses (ngoặc tròn) có thứ tự ưu tiên cao nhất và có thể được dùng để buộc việc ước lượng một biểu thức theo đúng thứ tự mà bạn mong muốn. Vì các biểu thức trong cặp ngoặc đơn được lượng giá trước tiên, +2*(3-1)+ bằng 4, và +pass:[(1+1)^(5-2)]+ bằng 8. Bạn cũng có thể dùng cặp ngoặc đơn để biểu thức trở nên dễ đọc, như với +(minute * 100) / 60+, ngay cả khi không có nó thì kết quả cũng không đổi.
(((ngoặc tròn)))

* __E__xponentiation (lũy thừa) có thứ tự ưu tiên kế tiếp, vì vậy +pass:[1+2^3]+ bằng 9, chứ không phải 27, và +2*3^2+ bằng 18, chứ không phải 36.
(((pass:[^])))

* __M__ultiplication (phép nhân) và __D__ivision (chia) có cùng độ ưu tiên, cao hơn các phép cộng (__A__ddition) và trừ (__S__ubtraction). Vì vậy +2*3-1+ bằng 5 chứ không phải 4, và +pass:[6+4/2]+ bằng 8 chứ không phải 5.
(((pass:[*])))(((pass:[/])))(((pass:[+])))(((pass:[-])))

* Các toán tử có cùng độ ưu tiên được ước lượng từ trái sang phải (trừ phép lũy thừa). Vì vậy, trong biểu thức +degrees / 2 * π+, phép chia được thực hiện trước và kết quả sẽ được nhân với +π+. Để chia cho latexmath:[\(2\pi\)], bạn có thể dùng cặp ngoặc đơn hoặc viết +degrees / 2 / π+ hoặc +degrees / 2π+.

[TIP]
====
Tôi không cần cố sức nhớ mức độ ưu tiên của toán tử. Nếu nhìn vào toán tử mà không chỉ ra được thứ tự thực hiện thì tôi sẽ thêm các ngoặc tròn để cho rõ.
====

=== Các thao tác với chuỗi

Nói chung, bạn không thể thực hiện các phép toán đối với chuỗi, ngay cả khi chuỗi trông giống như những con số. Vì vậy các biểu thức sau đây đều không hợp lệ:
(((thao tác với chuỗi)))(((thao tác, chuỗi)))

[source,julia]
----
"2" - "1"    "eggs" / "easy"    "third" + "a charm"
----

Nhưng có hai ngoại lệ, đó là +*+ và +pass:[^]+.
(((pass:[*])))(((pass:[^])))

Toán tử +pass:[*]+ thực hiện _nối chuỗi_,  nghĩa là ghép nối tiếp các chuỗi lại với nhau. Chẳng hạn:
((("string", "concatenation", see="concatenate")))((("concatenate")))

[source,@julia-repl-test]
----
julia> first_str = "throat"
"throat"
julia> second_str = "warbler"
"warbler"
julia> first_str * second_str
"throatwarbler"
----

Toán tử +^+ cũng có tác dụng đối với chuỗi; nó có nhiệm vụ lặp lại. Chẳng hạn, +"Spam"pass:[^]3+ is +"SpamSpamSpam"+. Nếu một trong các toán hạng là chuỗi, toán hạng còn lại phải là một số nguyên.
((("chuỗi", "lặp", see="lặp")))((("lặp")))

Công dụng của +pass:[*]+ và +^+ cũng có nghĩa tương tự như với phép cộng và phép nhân. Giống như việc +4pass:[^]3+ tương đương với +4*4*4+, chúng ta trông đợi +"Spam"pass:[^]3+ tương đương +pass:["Spam"*"Spam"*"Spam"]+, và thật vậy.


=== Chú thích

Khi chương trình trở nên lớn và phức tạp hơn, chúng cũng đồng thời khó đọc hơn. Các ngôn ngữ hình thức rất cô đặc, và nhìn vào một đoạn mã lệnh ta thường khó hình dung ra nó để làm gì, hoặc tại sao.

Vì lí do này, ta nên thêm các ghi chú vào chương trình để giải thích rằng chương trình làm gì bằng ngôn ngữ tự nhiên. Các ghi chú này được gọi là _chú thích_, và đều bắt đầu bằng kí hiệu +#+:
(((chú thích)))((("pass:[#]", see="chú thích")))

[source,julia]
----
# tính phần trăm của một giờ đã trôi qua
percentage = (minute * 100) / 60
----

Trong trường hợp này, chú thích xuất hiện riêng trên một dòng. Bạn cũng có thể đặt chú thích ở cuối một dòng:

[source,julia]
----
percentage = (minute * 100) / 60   # phần trăm của một giờ
----

Mọi thứ từ dấu +#+ về cuối dòng đều được bỏ qua—nó không làm ảnh hưởng đến tác dụng của chương trình.

Các chú thích rất cần thiết khi chúng đưa thông tin về những tính năng không dễ thấy của đoạn mã lệnh. Thường ta có thể coi rằng người đọc đều hình dung được mã lệnh _làm gì_; và tốt hơn là hãy dùng chú thích vào việc giải thích _tại sao_.

Trong đoạn mã lệnh sau, chú thích là thừa và vô dụng:

[source,julia]
----
v = 5   # gán 5 vào cho v
----

Chú thích sau chứa thông tin hữu dụng hơn mà mã lệnh không có:

[source,julia]
----
v = 5   # vận tốc tính theo mét/giây.
----

[WARNING]
====
Việc đặt tên biến hợp lý có thể làm giảm nhu cầu dùng chú thích, nhưng những tên biến dài có thể làm các biểu thức khó đọc, vì vậy nó luôn có sự được–mất giữa hai mặt.
====


=== Gỡ lỗi

Có ba loại lỗi có thể xuất hiện trong chương trình: lỗi cú pháp, lỗi chạy và lỗi ngữ nghĩa. Để nhanh chóng tìm ra lỗi ta cần phân biệt được chúng.
(((gỡ lỗi)))

Lỗi cú pháp:: 
“Cú pháp” nghĩa là cấu trúc của chương trình và các quy tắc về cấu trúc đó. Chẳng hạn, ngoặc tròn phải đi theo từng cặp, như vậy +(1 + 2)+ là hợp lệ, nhưng +8)+  là một lỗi cú pháp.
+
Nếu trong chương trình có bất cứ lỗi cú pháp nào, Julia sẽ hiển thị thông báo lỗi và dừng chạy chương trình. Nếu bạn mới nhập môn lập trình được vài tuần, rất có thể bạn phải dành nhiều thời gian dò tìm lỗi. Khi kinh nghiệm tăng dần lên, bạn sẽ tránh được lỗi tốt hơn và nếu mắc thì cũng phát hiện ra lỗi nhanh hơn.
(((lỗi cú pháp)))(((thông báo lỗi)))

Lỗi thực thi:: 
Loại lỗi thứ hai là lỗi thực thi; chúng có tên như vậy bởi vì chỉ xuất hiện khi chương trình đã bắt đầu chạy. Những lỗi kiểu này được gọi là _biệt lệ_ bởi vì chúng thường chỉ những điều kiện (xấu) bất thường phát sinh.
+
Với những chương trình đơn giản trong một vài chương đầu tiên, ta ít gặp những lỗi chạy chương trình kiểu như vậy.
(((lỗi thực thi)))((("lỗi", "thực thi", see="lỗi thực thir")))(((biệt lệ, see="lỗi thực thi")))

Lỗi ngữ nghĩa:: 
Loại lỗi thứ ba là lỗi "ngữ nghĩa". Trong trường hợp có lỗi kiểu này, chương trình vẫn chạy thông theo nghĩa máy sẽ không phát thông báo lỗi, nhưng sẽ không thực hiện đúng yêu cầu mong muốn, mà sẽ cho kết quả khác. Cụ thể là thực hiện theo đúng những hướng dẫn câu lệnh trong chương trình.
+
Việc phát hiện các lỗi ngữ nghĩa đôi lúc rất khó vì bạn cần phải quay ngược lại và nhìn vào kết quả của chương trình để phán đoán xem bản thân chương trình đã thực hiện những gì.
(((lỗi ngữ nghĩa)))((("lỗi", "ngữ nghĩa", see="lỗi ngữ nghĩa")))

=== Thuật ngữ

biến::
Tên được tham chiếu đến một giá trị.
(((biến)))

lệnh gán::
Lệnh để gán một giá trị cho một biến.
(((lệnh gán)))

sơ đồ trạng thái::
Đồ thị biểu diễn một tập hợp các biến và các giá trị mà chúng tham chiếu tới.
(((sơ đồ trạng thái)))

từ khoá::
Từ dành riêng cho trình biên dịch để phân tách một chương trình; bạn không thể dùng những từ khoá như +if+, +function+, hay +while+ để đặt tên biến.
(((từ khoá)))

toán hạng::
Một trong những giá trị mà toán tử thực hiện với.
(((toán hạng)))

biểu thức::
Tập hợp các biến, toán tử, và giá trị nhằm biểu diễn một giá trị kết quả duy nhất.
(((biểu thức)))

ước lượng::
Giản hoá một biểu thức bằng cách thực hiện các phép tính nhằm thu được một giá trị duy nhất.
(((ước lượng)))

câu lệnh::
Đoạn mã biểu diễn một lệnh hoặc một hành động. Cho đến giờ, các câu lệnh mà ta đã gặp gồm có lệnh gán và lệnh print.
(((câu lệnh)))

thực thi::
Việc chạy một câu lệnh và thực hiện điều được yêu cầu.
(((thực thi)))

chế độ tương tác::
Cách dùng REPL Julia bằng việc gõ mã lệnh vào dấu nhắc.
(((chế độ tương tác)))

chế độ văn lệnh::
Cách dùng Julia để đọc mã lệnh từ một văn lệnh và chạy nó.
(((chế độ văn lệnh)))

văn lệnh::
Chương trình được lưu trong một file.
(((văn lệnh)))

ưu tiên toán tử::
Các quy tắc chi phối thứ tự mà những biểu thức bao gồm nhiều toán tử và toán hạng được ước lượng.
(((ưu tiên toán tử)))

nối chuỗi::
Ghép đầu một chuỗi này tiếp vào cuối chuỗi kia.
(((nối chuỗi)))

chú thích::
Thông tin trong một chương trình; thông tin này có ích đối với các lập trình viên khác (hoặc người khác đọc mã nguồn) nhưng không làm ảnh hưởng đến việc thực thi chương trình.
(((chú thích)))

lỗi cú pháp::
Lỗi trong chương trình mà làm cho quá trình phân tách không thể thực hiện được (và hệ quả là không thể thông dịch được).
(((lỗi cú pháp)))

lỗi thực thi hoặc biệt lệ::
Lỗi được phát hiện khi chương trình đang chạy.
(((lỗi thực thi)))

ngữ nghĩa::
Ý nghĩa của chương trình.
(((ngữ nghĩa)))

lỗi ngữ nghĩa::
Lỗi có trong chương trình mà khiến cho chương trình thực hiện công việc ngoài ý định của người viết.
(((lỗi ngữ nghĩa)))


=== Bài tập

[[ex02-1]]
===== Bài tập 2-2

Lại theo lời khuyên tôi chỉ ra ở chương trước, mỗi khi học một tính năng mới, bạn nên thử ngay nó trong chế độ tương tác rồi cố ý tạo các lỗi để xem điều gì sẽ trục trặc.

. Ta đã thấy rằng +n = 42+ là hợp lệ. Thế còn +42 = n+?

. Và +x = y = 1+ thì sao?

. Trong một số ngôn ngữ lập trình, câu lệnh phải kết thúc bởi dấu chấm phẩy, +;+. Điều gì sẽ xảy ra nếu bạn viết dấu chấm phẩy ở cuối câu lệnh Julia?
(((pass:[;])))

. Điều gì sẽ xảy ra nếu bạn viết dấu chấm phẩy ở cuối câu lệnh?

. Trong kí hiệu toán học bạn có thể đem +x+ nhân với +y+ như thế này: +x y+. Điều gì sẽ xảy ra nếu bạn thử viết vậy trong Julia? Thế còn 5x thì sao?

[[ex02-2]]
===== Bài tập 2-3

Tập luyện cách dùng REPL của Julia thay cho máy tính tay:
(((máy tính tay)))

. Thể tích của một hình cầu có bán kính latexmath:[\(r\)] là latexmath:[\(\frac{4}{3} \pi r^3\)]. Thể tích của một hình cầu có bán kính bằng 5 là bao nhiêu?

. Coi rằng giá bìa của một cuốn sách là $ 24.95, nhưng các hiệu sách được mua giảm giá 40 %. Tiền vận chuyển là $ 3 với cuốn sách đầu và 75 xu với mỗi cuốn sách thêm. Tổng số tiền bán sỉ cho 60 bản sách là bao nhiêu?

. Nếu tôi rời nhà lúc 6:52 sáng và chạy chậm 1 dặm (mỗi dặm hết 8:15), sau đó chạy mức trung bình 3 dặm (mỗi dặm hết 7:12) và tiếp tục chạy chậm 1 dặm, thì lúc mấy giờ tôi sẽ về đến nhà để ăn sáng?

