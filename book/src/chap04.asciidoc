[[chap04]]
== Nghiên cứu cụ thể: thiết kế giao diện

Chương này trình bày một nghiên cứu cụ thể nhằm biểu diễn quá trình thiết kế các hàm để chúng làm việc với nhau.

Chương giới thiệu đồ họa rùa, một cách lập trình tạo nên các bản vẽ. Đồ họa rùa không có trong thư viện chuẩn, nên bạn cần bổ sung module ThinkJulia vào với thiết lập Julia trên máy bạn.

Có thể thực thi các ví dụ trong chương này trong một sổ tính đô họa trên JuliaBox, môi trường kết hợp mã lệnh, các dòng chữ định dạng, công thức toán học và đa phương tiện, tất cả trong một văn bản (xem <<juliabox>>).
(((JuliaBox, sổ tính đồ họa)))


=== Turtles

_Module_ là một file chứa một nhóm các hàm liên quan. Julia cấp sẵn một số module trong thư viện chuẩn. Có thể bổ sung thêm các tính năng từ một tập hợp các _gói_ không ngừng được phát triển (https://juliaobserver.com).
(((module)))(((gói)))

Có thể cài đặt các gói trong REPL khi vào chế độ Pkg REPL bằng cách nhấn phím +]+.
(((pass:[&#93;])))(((ThinkJulia)))((("module", "ThinkJulia", see="ThinkJulia")))

[source,jlcon]
----
(v1.0) pkg> add https://github.com/BenLauwens/ThinkJulia.jl
----

Việc này có thể tốn chút thời gian.

Trước khi sử dụng được các hàm trong một module, bạn cần nhập module với lệnh +using+:
(((using)))((("từ khóa", "using", see="using")))(((using statement)))((("lệnh", "using", see="using (lệnh)")))

[source,@julia-repl-test]
----
julia> using ThinkJulia

julia> 🐢 = Turtle()
Luxor.Turtle(0.0, 0.0, true, 0.0, (0.0, 0.0, 0.0))
----

Module +ThinkJulia+ cung cấp một hàm có tên +Turtle+ để tạo ra một đối tượng +Luxor.Turtle+, mà ta sẽ gán cho biến tên là +🐢+ (*+\:turtle: TAB+*).
(((Turtle)))((("type", "Luxor", "Turtle", see="Turtle")))

Một khi đã tạo ra con rùa, bạn có thể gọi các hàm để di chuyển nó trong bản vẽ. Chẳng hạn, để cho rùa đi tiến:
(((forward)))((("hàm", "ThinkJulia", "forward", see="forward")))

[source,julia]
----
@svg begin
    forward(🐢, 100)
end
----

[[fig04-1]]
.Cho rùa đi tiến
image::images/fig41.svg[]


Từ khóa +@svg+ chạy một macro để vẽ nên hình SVG. Macro là tính năng quan trọng nhưng là kiến thức nâng cao trong Julia.
(((@svg)))((("macro", "Luxor", "@svg", see="@svg")))(((macro)))(((hình SVG)))

Các đối số cho +forward+ là con rùa và khoảng cách tính theo điểm ảnh (pixel), vì vậy kích thước thực sẽ phụ thuộc vào màn hình máy tính bạn.

Một hàm khác bạn có thể gọi mà nhận rùa làm đối số là +turn+; hàm này để quay con rùa. Đối số thứ hai cho +turn+ là góc tính bằng độ.
(((turn)))((("hàm", "ThinkJulia", "turn", see="turn")))

Ngoài ra, mỗi con rùa đều nắm một cây bút, bút này có thể được nhấc hoặc hạ; nếu hạ bút xuống, rùa sẽ để lại nét vẽ khi nó di chuyển. <<fig04-1>> cho thấy nết vẽ để lại phía sau con rùa. Các hàm +penup+ và +pendown+ tương ứng với nhấc bút hoặc hạ bút.
(((penup)))((("hàm", "ThinkJulia", "penup", see="penup")))(((pendown)))((("hàm", "ThinkJulia", "pendown", see="pendown")))

Để vẽ một góc vuông, hãy sửa lại lời gọi macro:

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

===== Bài tập 4-1

Bây giờ hãy chỉnh sửa macro để vẽ một hình vuông. Xin đừng đọc tiếp trước khi bạn hoàn thành chương trình này!


[[simple_repetition]]
=== Cách lặp lại đơn giản

Đôi khi bạn viết mã lệnh kiểu như sau:
(((lặp lại)))

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

Chúng ta có thể làm việc này bằng cách viết gọn hơn với một lệnh +for+:
(((lệnh for)))((("lệnh", "for", see="lệnh for")))(((for)))((("từ khóa", "for", see="for")))(((in)))((("từ khóa", "in", see="in")))

[source,@julia-repl-test]
----
julia> for i in 1:4
          println("Hello!")
       end
Hello!
Hello!
Hello!
Hello!
----

Đây là cách dùng lệnh +for+ đơn giản nhất; sau này chúng ta sẽ tìm hiểu thêm. Nhưng chỉ bằng cách đơn giản này cũng đủ để viết lại chương trình vẽ hình vuông. Xin đừng đọc tiếp trước khi bạn hoàn thành chương trình.

Đây là cách dùng một lệnh +for+ để vẽ hình vuông:

[source,julia]
----
🐢 = Turtle()
@svg begin
    for i in 1:4
        forward(🐢, 100)
        turn(🐢, -90)
    end
end
----

Cú pháp của lệnh +for+ cũng tương tự như một định nghĩa hàm. Nó gồm có một phần đầu kết thúc bởi dấu hai chấm và một phần thân được viết thụt vào so với lề. Phần thân có thể chứa bao nhiêu câu lệnh cũng được.
(((end)))

Một câu lệnh +for+ đôi khi còn đươc gọi là một _vòng lặp_ vì dòng thực hiện sẽ đi xuôi theo phần thân và vòng ngược trở lại đầu. Trong ví dụ trên, phần thân được chạy qua bốn lần.
(((vòng lặp)))

Thực ra phiên bản mã lệnh này hơi khác với các bản vẽ hình vuông trước đó ở chỗ nó thực hiện một lần rẽ nữa sau khi vẽ cạnh cuối cùng của hình vuông. Lần rẽ dư thừa này làm thời gian chạy lâu hơn một chút, nhưng nó đơn giản hoá mã lệnh nếu chúng ta có thể thực hiện các công việc giống nhau bằng vòng lặp. Phiên bản này cũng có tác dụng đưa con rùa về trạng thái khởi đầu, đặt nó về hướng xuất phát.


=== Bài tập

Tiếp theo đây là một loạt các bài tập có sử dụng con rùa. Chúng có mục đích riêng ngoài việc giải trí. Khi làm các bài tập này, bạn hãy nghĩ xem mục đích riêng đó là gì.

[TIP]
====
Bên cạnh các bài tập còn có lời giải. Bạn hãy cố hoàn thành (hoặc ít nhất là nỗ lực làm) các bài tập trước khi xem qua lời giải này.
====

[[ex04-1]]
===== Bài tập 4-2

Hãy viết một hàm có tên +square+ nhận một tham số tên +t+, vốn là một con rùa. Hàm này dùng con rùa để vẽ một hình vuông.

[[ex04-2]]
===== Bài tập 4-3

Viết một lời gọi hàm nhằm mục đích truyền +t+ như một đối số cho +square+, và sau đó chạy lại chương trình.

[[ex04-3]]
===== Bài tập 4-4

Thêm một tham số nữa có tên +len+, cho square. Sửa đổi phần thân của sao cho chiều dài cạnh là +len+, rồi sửa đổi lời gọi hàm để cung cấp cho một đối số thứ hai. Chạy lại macro này. Thử chương trình với một loạt các giá trị của +len+.

[[ex04-4]]
===== Bài tập 4-5

Tạo một bản sao của +square+ và đổi tên thành +polygon+. Thêm một tham số có tên là +n+ và sửa đổi phần thân để nó vẽ một hình đa giác đều có latexmath:[\(n\)] cạnh. 

[TIP]
====
Các góc ngoài của một hình latexmath:[\(n\)]-giác đều cùng bằng latexmath:[\(\frac{360}{n}\)] độ.
====

[[ex04-5]]
===== Bài tập 4-6

Viết một hàm có tên là +circle+ nhận vào rùa +t+, và bán kính, +r+, như là hai tham số. Hàm này thực hiện vẽ gần chính xác một đường tròn bằng cách gọi hàm +polygon+  với các giá trị phù hợp cho chiều dài cạnh và số cạnh. Thử lại hàm của bạn với một loạt các giá trị của +r+. 

[TIP]
====
Hình dung ra độ dài chu vi đường tròn và đảm bảo rằng +len * n == circumference+ (chu vi).
====

[[ex04-6]]
===== Bài tập 4-7

Viết một bản tổng quát hơn so với +circle+ gọi là +arc+ trong đó nhận thêm một tham số +angle+, nhằm chỉ định bao nhiêu phần đường tròn cần được vẽ. +angle+ có đơn vị là độ, vì vậy khi +angle = 360+, +arc+ sẽ phải vẽ một đường tròn.


=== Bao gói

Bài tập thứ nhất yêu cầu bạn đặt đoạn mã vẽ hình vuông vào trong một định nghĩa hàm và sau đó gọi hàm này, trong đó chuyển con rùa như một tham biến. Một cách làm là như sau:
(((square)))((("hàm", "tự định nghĩa", "square", see="square")))

[source,julia]
----
function square(t)
    for i in 1:4
        forward(t, 100)
        turn(t, -90)
    end
end
🐢 = Turtle()
@svg begin
    square(🐢)
end
----

Các câu lệnh trong cùng, +forward+ và +turn+ được thụt lề hai lần, nhằm cho thấy chúng ở bên trong vòng lặp +for+, vốn bản thân ở trong định nghĩa hàm.
(((thụt lề)))

Bên trong hàm, +t+ tham chiếu đến cùng con rùa +🐢+, vì vậy +turn(t, -90)+ có cùng ý nghĩa như +turn(🐢, -90)+. Vậy tại sao không đặt tên tham biến là +🐢+? Đó là vì +t+ có thể là bất cứ con rùa nào chứ không riêng gì +🐢+, và bạn có thể tạo ra một con rùa thứ hai và truyền nó như một đối số tới +square+:

[source,julia]
----
🐫 = Turtle()
@svg begin
    square(🐫)
end
----

Việc gói một đoạn mã vào trong một hàm được gọi là _bao gói_. Một trong những ưu điểm của việc bao gói là nó gắn đoạn mã với một tên cụ thể, chính là một kiểu giúp cho việc biên khảo sau này. Một ưu điểm khác là nếu bạn dùng lại đoạn mã, việc gọi tên hàm sẽ ngắn gọn hơn nhiều so với việc sao chép và dán toàn bộ phần thân hàm!
(((bao gói)))


=== Khái quát hoá

Bước tiếp theo là thêm một tham số +len+ parameter vào +square+. Sau đây là một giải pháp:
(((square)))

[source,julia]
----
function square(t, len)
    for i in 1:4
        forward(t, len)
        turn(t, -90)
    end
end
🐢 = Turtle()
@svg begin
    square(🐢, 100)
end
----

Việc thêm một tham số vào một hàm được gọi là _khái quát hoá_ vì nó làm cho hàm số trở nên khái quát hơn: trong phiên bản trước, kích thước của hình vuông là cố định, ở phiên bản này nó có thể lớn nhỏ bất kì.
(((khái quát hoá)))

Bước tiếp theo cũng là một cách khái quát hoá. Thay vì việc vẽ hình vuông, +polygon+ vẽ một hình đa giác đều với số cạnh bất kì. Sau đây là một lời giải:
(((polygon)))((("hàm", "tự định nghĩa", "polygon", see="polygon")))

[source,julia]
----
function polygon(t, n, len)
    angle = 360 / n
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
🐢 = Turtle()
@svg begin
    polygon(🐢, 7, 70)
end
----

Đoạn mã trên thực hiện vẽ thất giác đều với mỗi cạnh dài bằng 70.


=== Thiết kế giao diện

Bước tiếp theo là viết +circle+, trong đó nhận một tham biến là bán kính +r+. Sau đây là một lời giải đơn giản có sử dụng +polygon+ để vẽ đa giác đều 50 cạnh:
(((circle)))((("hàm", "tự định nghĩa", "circle", see="circle")))

[source,julia]
----
function circle(t, r)
    circumference = 2 * π * r
    n = 50
    len = circumference / n
    polygon(t, n, len)
end
----

Dòng đầu tiên nhằm tính toán chu vi của đường tròn có bán kính latexmath:[\(r\)] theo công thức latexmath:[\(2 \pi r\)]. +n+ là số đọan thẳng để vẽ gần đúng đường tròn, vì vậy +len+ là chiều dài mỗi đoạn. Do đó, +polygon+ sẽ vẽ một đa giác đều có 50 cạnh gần khớp với một đường tròn có bán kính +r+.

Một hạn chế của lời giải này là +n+ phải là hằng số; điều đó có nghĩa là với những đường tròn lớn, các đoạn thẳng sẽ rất dài, và với những đường tròn nhỏ, chúng ta mất thời gian để vẽ quá nhiều đoạn thẳng ngắn. Một giải pháp là khái quát hoá hàm này bằng cách nhận +n+ làm tham số. Điều này giúp cho người dùng (khi gọi circle) có quyền lựa chọn tốt hơn, nhưng giao diện của chương trình vì thế cũng kém phần trong sáng.

_Giao diện_ của một hàm là phần tóm tắt cách dùng hàm đó: các tham biến là gì? Hàm được viết nhằm mục đích gì? Và giá trị được trả lại là gì? Một giao diện “trong sáng” nếu nó cho phép mã lệnh gọi đến làm điều mong muốn, mà không phải bận tâm về những chi tiết không cần thiết.
(((giao diện)))

Ở ví dụ này, +r+ phải thuộc về giao diện vì nó chi phối đường tròn cần được vẽ. Còn +n+ thì ít có lí hơn vì nó liên quan đến những chi tiết gắn với cách vẽ đường tròn đó.

Thay vì việc làm lộn xộn giao diện, tốt hơn là ta chọn một giá trị hợp lí cho +n+ tuỳ thuộc vào chu vi +circumference+:

[source,julia]
----
function circle(t, r)
    circumference = 2 * π * r
    n = trunc(circumference / 3) + 3
    len = circumference / n
    polygon(t, n, len)
end
----

Bây giờ số cạnh xấp xỉ bằng +circumference/3+, như vậy mỗi cạnh có độ dài xấp xỉ bằng 3, tức là đủ nhỏ để cho đường tròn được đẹp, nhưng cũng đủ lớn để mã lệnh được hiệu quả, và phù hợp với mọi kích cỡ đường tròn.

Việc cộng 3 vào +n+ đảm bảo rằng đa giác có ít nhất là 3 cạnh.


[[refactoring]]
=== Chỉnh đốn

Khi viết circle, tôi có thể dùng +polygon+ vì một đa giác đều nhiều cạnh có thể gần khớp với một đường tròn. Nhưng +arc+ thì không phù hợp; ta không dùng được +polygon+ hoặc +circle+ để vẽ một cung tròn.

Một cách làm khác là bắt đầu bằng một bản sao của +polygon+ và biến đổi nó về thành +arc+. Kết quả có thể là như sau:
(((arc)))((("hàm", "tự định nghĩa", "arc", see="arc")))

[source,julia]
----
function arc(t, r, angle)
    arc_len = 2 * π * r * angle / 360
    n = trunc(arc_len / 3) + 1
    step_len = arc_len / n
    step_angle = angle / n
    for i in 1:n
        forward(t, step_len)
        turn(t, -step_angle)
    end
end
----

Nửa sau của hàm này trông giống như +polygon+, nhưng ta không thể dùng lại +polygon+ mà không thay đổi giao diện. Ta có thể khái quát hoá +polygon+ để nhận vào tham số thứ ba là góc, như khi đó +polygon+ lại không còn là một tên gọi phù hợp nữa! Thay vào đó, hãy gọi hàm với tên +polyline+ để khái quát hơn:
(((polyline)))((("hàm", "tự định nghĩa", "polyline", see="polyline")))

[source,julia]
----
function polyline(t, n, len, angle)
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
----

Bây giờ ta có thể viết lại +polygon+ và +arc+ có dùng +polyline+:
(((polygon)))(((arc)))

[source,julia]
----
function polygon(t, n, len)
    angle = 360 / n
    polyline(t, n, len, angle)
end

function arc(t, r, angle)
    arc_len = 2 * π * r * angle / 360
    n = trunc(arc_len / 3) + 1
    step_len = arc_len / n
    step_angle = angle / n
    polyline(t, n, step_len, step_angle)
end
----

Sau cùng, ta có thể viết lại +circle+ có dùng +arc+:
(((circle)))

[source,julia]
----
function circle(t, r)
    arc(t, r, 360)
end
----

Quá trình này—việc sắp xếp lại chương trình để cải thiện giao diện của hàm và giúp cho sử dụng lại mã lệnh— được gọi là _chỉnh đốn_. Trong trường hợp này, ta đã nhận thấy rằng có sự tương đồng trong mã lệnh của +arc+ và +polygon+, vì vậy ta đã chỉnh đốn lại bằng cách đưa phần chung này vào trong +polyline+.
(((chỉnh đốn)))

Nếu đã có kế hoạch từ trước, có thể ta đã viết +polyline+ từ đầu và tránh việc chỉnh đốn, nhưng thường thì vào thời điểm bắt đầu dự án bạn không biết rõ để thiết kế được toàn bộ giao diện. Một khi đã bắt tay vào viết mã lệnh, bạn hiểu hơn về vấn đề cần giải quyết. Đôi khi việc chỉnh đốn là một tín hiệu cho thấy bạn đã học được một điều gì đó.


=== Một kế hoạch phát triển

Một _kế hoạch phát triển_ là một quá trình trong việc lập trình. Ở đây ta sẽ dùng kĩ thuât “bao gói và khái quát hoá”. Các bước trong quá trình này gồm có:
(((kế hoạch phát triển chương trình)))

. Bắt đầu bằng việc viết chương trình nhỏ mà không định nghĩa hàm.

. Một khi chương trình của bạn đã chạy, hãy đóng gói nó vào trong một hàm và đặt tên cho hàm này.

. Khái quát hoá hàm bằng cách thêm vào các tham số một cách thích hợp.

. Lặp lại các bước 1–3 đến khi bạn có một nhóm các hàm chạy được. Hãy sao chép và dán các đoạn mã lệnh tốt đó để khỏi đánh máy lại (và gỡ lỗi lại).

. Tìm mọi cơ hội để cải thiện chương trình bằng cách chỉnh đốn. Chẳng hạn, nếu bạn có đoạn mã lệnh tương tự ở một vài chỗ trong chương trình, hãy xét xem có thể chỉnh đốn bằng việc đưa nó vào một hàm chung hay không.

Quá trình này có một số hạn chế—ta sẽ thấy các giải pháp khác trong phần sau quyển sách—nhưng có thể nó sẽ có ích nếu bạn không biết trước được việc chia chương trình thành các hàm như thế nào cho hợp lí. Phương pháp này giúp bạn thiết kế trong lúc bạn viết chương trình.


=== Docstring

_Docstring_ là một chuỗi được đặt trước một hàm có nhiệm vụ giải thích giao diện (“doc” là gọi tắt cho từ “documentation”, văn bản). Sau đây là một ví dụ:
(((docstring)))(((ba nháy kép)))((("pass:[&quot;&quot;&quot;]", see="ba nháy kép")))

[source,julia]
----
"""
polyline(t, n, len, angle)

Vẽ n đoạn thẳng với chiều dài cho trước và góc
(tính bằng độ) giữa chúng.  t là một Turtle.
"""
function polyline(t, n, len, angle)
    for i in 1:n
        forward(t, len)
        turn(t, -angle)
    end
end
----

Nội dung phần giải thích này có thể truy cập được từ REPL hoặc sổ tính bằng cách gõ ? tiếp theo là tên của hàm hoặc macro, và nhấn +ENTER+:
(((trợ giúp)))((("?", see="trợ giúp")))

----
help?> polyline
search:

  polyline(t, n, len, angle)

  Vẽ n đoạn thẳng với chiều dài cho trước và góc (tính bằng độ) giữa chúng.  t là một Turtle.
----

Docstring thường là chuỗi đặt trong ba dấu nháy, cũng được gọi là chuỗi nhiều dòng vì ba dấu nháy cho phép chuỗi kéo dài qua nhiều dòng liên tiếp.

Docstring này chứa đầy đủ tất cả những thông tin thiết yếu cho người cần dùng đến hàm này. Nó giải thích một cách cô đọng hàm này có nhiệm vụ gì (mà không nói chi tiết rằng hàm thực hiện bằng cách nào). Nó giải thích ảnh hưởng của mỗi tham biến đối với biểu hiện của hàm và mỗi tham biến có kiểu là gì (trong trường hợp không rõ ràng).

[TIP]
====
Việc ghi chép này là một phần quan trọng trong thiết kế giao diện. Một giao diện được thiết kế tốt phải là giao diện rất dễ giải thích; nếu bạn gặp khó khăn khi giải thích các hàm mà bạn viết ra thì đó có thể là dấu hiệu cho thấy giao diện của bạn có thể phải được cải thiện.
====


=== Gỡ lỗi

Một giao diện cũng tựa như một giao kèo giữa hàm và chương trình gọi. Chương trình đồng ý cung cấp những tham biến nhất định còn hàm thì đồng ý thực hiện một việc nhất định.
(((gỡ lỗi)))

Chẳng hạn, +polyline+ đòi hỏi bốn đối số: +t+ phải là một con rùa; +n+ phải là một số nguyên; +len+ phải là một số dương; còn +angle+ phải là một số và được hiểu là tính bằng độ.

Các yêu cầu trên được gọi là những _điều kiện tiền đề_ vì chúng cần được đảm bảo là đúng trước khi hàm được thực hiện. Trái lại, các điều kiện ở cuối hàm được gọi là _trạng thái sau_. Các trạng thái sau gồm có những hiệu ứng được mong đợi của hàm (như việc vẽ các đoạn thẳng) và bất kì hiệu ứng phụ nào khác (như di chuyển rùa hoặc thực hiện thay đổi gì đó).
(((điều kiện tiền đề)))(((trạng thái sau)))

Các điều kiện tiền đề thuộc về trách nhiệm của chương trình gọi. Nếu chương trình vi phạm một điều kiện tiền đề (đã được viết rõ ở docstring) và hàm không thực hiện được việc, thì lỗi thuộc về chương trình gọi chứ không thuộc về hàm.

Nếu các điều kiện tiền đề được thỏa mãn nhưng trạng thái sau thì không, khi đó lỗi nằm trong hàm. Nếu bạn dã nêu rõ điều kiện tiền đề và trạng thái sau, thì chúng có thể giúp bạn gỡ lỗi.


=== Thuật ngữ

module::
Một file chứa nhóm các hàm liên quan cùng những định nghĩa khác.
(((module)))

gói::
Một thư viện bên ngoài với những tính năng phụ thêm.
(((gói)))

lệnh using::
Lệnh đọc vào một file module và tạo đối tượng module.
(((lệnh using)))

vòng lặp::
Một phần của chương trình được thực hiện lặp đi lặp lại.
(((vòng lặp)))

bao gói::
Quá trình đưa một dãy các câu lệnh vào trong bên một định nghĩa hàm.
(((bao gói)))

khái quát hoá::
Quá trình thay thế một thứ riêng biệt một cách không cần thiết (chẳng hạn một con số) với một thứ khái quát thích hợp (như một biến hoặc tham số).
(((khái quát hoá)))

giao diện::
Một đoạn mô tả cách dùng một hàm, bao gồm tên và lời mô tả các đối số cùng giá trị được trả về.
(((giao diện)))

chỉnh đốn::
Quá trình sửa đổi một chương trình dã chạy được nhằm cải thiện giao diện hàm cũng như các chất lượng khác của mã lệnh.
(((chỉnh đốn)))

kế hoạch phát triển::
Một quy trình để viết chương trình máy tính.
(((kế hoạch phát triển chương trình)))

docstring::
Một chuỗi xuất hiện ngay trước lời định nghĩa hàm nhằm ghi chép lại giao diện của hàm đó.
(((docstring)))

điều kiện tiền đề::
Một yêu cầu cần được thoả mãn bởi chương trình gọi trước khi hàm được thực hiện.
(((điều kiện tiền đề)))

trạng thái sau::
Một điều kiện cần được hàm thoả mãn trước khi nó kết thúc.
(((trạng thái sau)))


=== Bài tập

[[ex04-7]]
===== Bài tập 4-8

Hãy nhập mã lệnh trong chương này vào một cuốn sổ tính.

. Vẽ một sơ đồ ngăn xếp trong đó chỉ ra trạng thái của chương trình khi chạy +circle(🐢, radius)+. Bạn có thể tính tay hoặc thêm vào các lệnh print kèm theo mã lệnh.

. Phiên bản +arc+ ở <<refactoring>> không chính xác lắm vì cách xấp xỉ đoạn thẳng này luôn nằm ngoài đường tròn đúng. Do đó, con rùa đã dừng lại ở cách đích cuối cùng một vài điểm. Cách làm của tôi đã giảm đi sai lệch này. Hãy đọc mã lệnh và cố gắng hiểu nó. Bạn có thể vẽ biểu đồ và xem cơ chế hoạt động của cách này.
(((arc)))

[source,julia]
----
"""
arc(t, r, angle)

Draws an arc with the given radius and angle:

    t: turtle
    r: radius
    angle: angle subtended by the arc, in degrees
"""
function arc(t, r, angle)
    arc_len = 2 * π * r * abs(angle) / 360
    n = trunc(arc_len / 4) + 3
    step_len = arc_len / n
    step_angle = angle / n

    # making a slight left turn before starting reduces
    # the error caused by the linear approximation of the arc
    turn(t, -step_angle/2)
    polyline(t, n, step_len, step_angle)
    turn(t, step_angle/2)
end
----

[[ex04-8]]
===== Bài tập 4-9

Viết một nhóm các hàm tổng quát để vẽ những bông hoa như <<fig04-2>>.

[[fig04-2]]
.Bông hoa vẽ bằng con rùa
image::images/fig42.svg[]

[[ex04-9]]
===== Bài tập 4-10

Viết một nhóm các hàm tổng quát để vẽ những hình như <<fig04-3>>.

[[fig04-3]]
.Hình quạt vẽ bằng con rùa
image::images/fig43.svg[]

[[ex04-10]]
===== Bài tập 4-11

Các chữ cái trong bảng chữ có thể được xây dựng từ một số đủ nhiều các thành phần cơ bản, như những đường thẳng đứng, đường ngang, và đường cong. Hãy thiết kế một bộ phông chữ mà có thể được vẽ với một số tốt thiểu các thành phần cơ bản như vậy; rồi viết các hàm thực hiện việc vẽ chữ cái.

Bạn nên từng hàm riêng cho mỗi chữ cái, với tên hàm như +draw_a+, +draw_b+, v.v., và đặt chung các hàm vào một file có tên là _letters.jl_.

[[ex04-11]]
===== Bài tập 4-12

Đọc thêm về các đường xoáy ốc từ trang https://en.wikipedia.org/wiki/Spiral; rồi viết chương trình vẽ nên đường xoáy ốc Archimede như <<fig04-4>>.

[[fig04-4]]
.Xoáy ốc Archimede
image::images/fig44.svg[]
