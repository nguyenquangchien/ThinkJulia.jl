[[chap05]]
== Câu lệnh điều kiện và đệ quy

Chủ đề chính của chương này là câu lệnh +if+, leejh này tực hiện các mã lệnh khác nhau tùy theo trạng thái của chương trình. Song trước hết tôi muốn giới thiệu hai toán tử mới: chia lấy phần nguyên và chia dư.


=== Chia lấy phần nguyên và chia dư

Toán tử _chia lấy phần nguyên_, +÷+ (*+\div TAB+*), thực hiện chia hai số rồi làm tròn kết quả xuống một số nguyên. Chẳng hạn, giả sử thời gian phát của một bộ phim là 105 phút. Bạn muốn biết thời gian đó tính bằng giờ là bao lâu. Phép chia hay dùng lại trả lại một số phẩy động:
(((toán tử chia lấy phần nguyên)))((("toán tử", "Base", "÷", see="chia lấy phần nguyên (toán tử)")))((("÷", see="chia lấy phần nguyên (toán tử)")))

[source,@julia-repl-test chap05]
----
julia> minutes = 105
105
julia> minutes / 60
1.75
----

Nhưng ta thường không viết số giờ với phần thập phân. Phép chia lấy phần nguyên trả lại số nguyên các giờ, làm tròn xuống:

[source,@julia-repl-test chap05]
----
julia> hours = minutes ÷ 60
1
----

Để lấy phần dư, bạn có thể đem trừ di số phút có trong một giờ:

[source,@julia-repl-test chap05]
----
julia> remainder = minutes - hours * 60
45
----

Một cách làm khác là dùng _toán tử chia dư_, +%+, toán tử này chia hai số và trả lại phần dư.
(((toán tử chia dư)))((("toán tử", "Base", "%", see="toán tử chia dư")))((("%", see="toán tử chia dư")))

[source,@julia-repl-test chap05]
----
julia> remainder = minutes % 60
45
----

[TIP]
====
Toán tử số dư có ích hơn bạn tưởng. Chẳng hạn, bạn có thể kiểm tra xem một số có chia hết cho số khác không—nếu +x % y+ bằng không thì +x+ chia hết cho +y+.

Hơn nữa, bạn còn có thể lọc ra những chữ số cuối cùng bên phải từ số ban đầu. Chẳng hạn, +x % 10+ cho ta số hàng đơn vị của +x+ (trong hệ thập phân). Tương tự, +x % 100+ cho ta hai chữ số hàng chục và đơn vị.
====


=== Biểu thức Boole

Một _biểu thức Boole_ là một biểu thức có giá trị đúng hoặc sai. Các ví dụ sau đây dùng toán tử +==+, để so sánh hai toán hạng và trả lại kết quả +true+  (đúng) nếu chúng bằng nhau và +false+ (sai) trong trường hợp còn lại:
(((biểu thức Boole)))(((true)))(((false)))

[source,@julia-repl-test]
----
julia> 5 == 5
true
julia> 5 == 6
false
----

+true+ và +false+  là các giá trị đặc biệt thuộc về kiểu +Bool+; chúng không phải là các chuỗi:
(((Bool)))((("kiểu", "Base", "Bool", see="Bool")))

[source,@julia-repl-test]
----
julia> typeof(true)
Bool
julia> typeof(false)
Bool
----

Toán tử +==+ là một trong số các toán tử quan hệ; các toán tử quan hệ khác gồm có::
(((toán tử quan hệ)))(((==)))((("toán tử", "Base", "==", see="==")))

[source,julia]
----
      x != y               # x không bằng y
      x ≠ y                # (\ne TAB)
      x > y                # x lớn hơn y
      x < y                # x nhỏ hơn y
      x >= y               # x lớn hơn hoặc bằng y
      x ≥ y                # (\ge TAB)
      x <= y               # x nhỏ hơn hoặc bằng y
      x ≤ y                # (\le TAB)
----

[WARNING]
====
Mặc dù có thể bạn đã quen thuộc với các toán tử này, song các kí hiệu Julia lại khác với kí hiệu toán học. Một lỗi phổ biến là dùng nhầm một dấu bằng (+=+) thay vì viết hai dấu bằng (+==+). Nhớ lại rằng +=+ là một toán tử gán, còn +==+ là một toán tử quan hệ. Ngoài ra không có toán tử nào được viết là +=<+ hoặc +pass:[=>]+.
(((≠)))((("toán tử", "Base", "≠", see="≠")))((("!=", see="≠")))((("toán tử", "Base", "!=", see="≠")))(((>)))((("toán tử", "Base", ">", see=">")))(((<)))((("toán tử", "Base", "<", see="<")))(((≥)))((("toán tử", "Base", "≥", see="≥")))(((">=", see="≥")))((("toán tử", "Base", ">=", see="≥")))(((≤)))((("toán tử", "Base", "≤", see="≤")))((("pass:[&lt;=]", see="≤")))((("toán tử", "Base", "pass:[&lt;=]", see="≤")))
====


=== Toán tử lô-gic

Có ba _toán tử lô-gic_: +&&+ (and), +||+ (or), và +!+ (not). Nghĩa của các toán tử này giống như nghĩa các từ tương ứng trong tiếng Anh. Chẳng hạn, +x > 0 && x < 10+ chỉ đúng khi +x+ lớn hơn +0+ _và_ nhỏ hơn +10+.
(((toán tử lô-gic)))(((&&)))(((||)))(((!)))

+n % 2 == 0 || n % 3 == 0+  chỉ đúng khi _một trong hai_ điều kiện là đúng; nghĩa là nếu số n chia hết cho 2 _hoặc_ 3.

Cả +&&+ lẫn +||+ đều kết hợp về phía phải, nhưng +&&+ có mức độ ưu tiên cao hơn +||+.

Sau cùng, toán tử +!+ phủ định một biểu thức Boole. Do vậy +!(x > y)+ chỉ đúng khi +x > y+ là sai; tức là nếu +x+ nhỏ hơn hoặc bằng +y+.


=== Thực hiện lệnh theo điều kiện

Để viết được những chương trình thực sự, chúng ta thường cần đến khả năng kiểm tra những điều kiện nhất định và thay đổi biểu hiện tương ứng của chương trình. _Câu lệnh điều kiện_ cung cấp cho ta khả năng này. Dạng đơn giản nhất là lệnh +if+:
(((câu lệnh điều kiện)))(((if)))((("từ khóa", "if", see="if")))(((lệnh if)))((("lệnh", "if", see="lệnh if")))

[source,julia]
----
if x > 0
    println("x là số dương")
end
----

Biểu thức Boole ở cuối lệnh +if+ được gọi là _điều kiện_. Nếu nó được thoả mãn thì đoạn lệnh bên trong được thực thi. Nếu không, sẽ chẳng có điều gì xảy ra.
(((điều kiện)))

Các lệnh +if+ có cùng cấu trúc với các định nghĩa hàm: chúng gồm có một đoạn đầu và tiếp theo là phần thân kết thúc bởi từ khóa +end+. Các câu lệnh kiểu như vậy được gọi là _lệnh ghép_.
(((compound statement)))(((end)))

Không có quy định về giới hạn tối đa số câu lệnh ở trong phần thân. Đôi khi ta cần có phần thân mà không chứa một lệnh thực sự nào (thường là chỉ để giữ chỗ cho mã lệnh sau này được viết thêm vào).

[source,julia]
----
if x < 0
    # TODO: cần phải xử lý giá trị âm!
end
----


=== Thực thi lệnh theo phương án

Dạng thứ hai của lệnh +if+ giúp cho việc _thực thi theo phương án_, trong đó có hai khả năng và điều kiện được đặt ra để căn cứ vào đó mà lựa chọn thực hiện một trong hai. Cú pháp có dạng như sau:
(((thực thi theo phương án)))(((else)))((("từ khóa", "else", see="else")))

[source,julia]
----
if x % 2 == 0
    println("x là số chẵn")
else
    println("x là số lẻ")
end
----

Nếu phần dư của phép chia +x+ cho 2 là 0, thì chúng ta biết rằng +x+ là số chẵn, và chương trình sẽ hiển thị thông báo điều này. Nếu điều kiện không được thoả mã thì lệnh thứ hai sẽ được thực hiện. Vì điều kiện hoặc là được thoả mãn, hoặc không; nên luôn chỉ có một trong hai phương án được thực hiện. Các phương án này được gọi là _nhánh_, vì chúng là các nhánh rẽ trong luồng thực thi.
(((nhánh)))


=== Các điều kiện xâu chuỗi

Đôi khi có nhiều hơn hai khả năng và ta cần nhiều nhánh. Một cách thể hiện quy trình tính toán là dùng các _điều kiện xâu chuỗi_:
(((điều kiện xâu chuỗi)))(((elseif)))((("từ khóa", "elseif", see="elseif")))

[source,julia]
----
if x < y
    println("x nhỏ hơn y")
elseif x > y
    println("x lớn hơn y")
else
    println("x bằng y")
end
----

Một lần nữa, chỉ có đúng một nhánh được thực hiện. Không có giới hạn cho số các lệnh +elseif+. Nếu có một vế +else+, thì nó phải đứng cuối cùng. Nhưng không nhất thiết cần có vế này.

[source,julia]
----
if choice == "a"
    draw_a()
elseif choice == "b"
    draw_b()
elseif choice == "c"
    draw_c()
end
----

Mỗi điều kiện được kiểm tra lần lượt. Nếu điều kiện thứ nhất sai, điều kiện tiếp theo sẽ được kiểm tra, và cứ như vậy. Nếu mộ ttrong các điều kiện đúng thì nhánh tương ứng được thực hiện; và cả câu lệnh lớn sẽ kết thúc. Ngay cả khi có nhiều hơn một điều kiện được thoả mãn, chỉ có nhánh đúng đầu tiên được thực hiện.


=== Các lệnh điều kiện lồng ghép

Một câu lệnh điều kiện có thể được đặt trong một lệnh điều khác. Ta có thể viết lại ví dụ ở mục trên như sau:
(((điều kiện lồng ghép)))

[source,julia]
----
if x == y
    println("x bằng y")
else
    if x < y
        println("x nhỏ hơn y")
    else
        println("x lớn hơn y")
    end
end
----

Câu lệnh điều kiện bên ngoài có hai nhánh. Nhánh thứ nhất chỉ chứa một lệnh đơn giản. Nhánh thứ hai lại chứa một câu lệnh +if+ khác, mà bản thân nó lại có hai nhánh. Hai nhánh này đều chứa những câu lệnh đơn giản, mặc dù dĩ nhiên chúng có thể là những câu lệnh điều kiện khác.

Tuy cách viết thụt đầu dòng (không bắt buộc) làm cho cấu trúc rõ ý, nhưng các _lệnh điều kiện lồng ghép_ trở nên rất khó cho người đọc nhanh. Nhìn chung, tốt hơn là ta nên cố gắng tránh dùng chúng.
(((thụt đầu dòng)))

Các toán tử lô-gic thường cho ta cách đơn giản hoá các câu lệnh điều kiện lồng ghép. Chẳng hạn, ta có thể viết lại mã lệnh sau bằng một lệnh điều kiện đơn:

[source,julia]
----
if 0 < x
    if x < 10
        println("x là số dương có một chữ số.")
    end
end
----

Lệnh +print+ chỉ được thực hiện một lần nếu ta làm cho nó đạt cả hai điều kiện, vì vậy đoạn lệnh sau với toán tử +&&+ cũng có tác dụng tương tự:


[source,julia]
----
if 0 < x && x < 10
    println("x là số dương có một chữ số.")
end
----

Với điều kiện kiểu này, Julia còn cho ta một cú pháp gọn hơn:

[source,julia]
----
if 0 < x < 10
    println("x là số dương có một chữ số.")
end
----


[[đệ quy]]
=== Đệ quy

Việc một hàm gọi một hàm khác là hợp lệ; một hàm gọi chính nó cũng hợp lệ. Mặc dù bề ngoài thì có thể điều này không rõ hay dở ra sao, nhưng thực ra đó chính là một trong những đặc điểm tuyệt vời nhất trong lập trình. Chẳng hạn, hãy xét hàm sau:
(((đếm ngược)))((("hàm", "tự định nghĩa", "đếm ngược", see="đếm ngược")))

[source,@julia-setup chap05]
----
function countdown(n)
    if n ≤ 0
        println("Bùm!")
    else
        print(n, " ")
        countdown(n-1)
    end
end
----

Nếu +n+ bằng 0 hoặc âm, chương trình sẽ in ra chữ, “Bùm!” Còn nếu không, nó sẽ in ra giá trị +n+ và sau đó gọi một hàm có tên +countdown+—nghĩa là chính nó—nhưng chuyển vào đối số +n-1+.

Điều gì sẽ xảy ra khi ta gọi hàm kiểu như thế này?

[source,@julia-repl-test chap05]
----
julia> countdown(3)
3 2 1 Bùm!
----

Việc thực hiện +countdown+ bắt đầu với +n = 3+, và do +n+ lớn hơn 0, nó đưa ra giá trị 3, và rồi gọi chính nó ...

pass:[&#8193;]Việc thực hiện +countdown+ bắt đầu với +n = 3+, và do +n+ lớn hơn 0, pass:[<br/>&#8193;&#8193;]nó đưa ra giá trị 2, và rồi gọi chính nó ...

pass:[&#8193;&#8193;]Việc thực hiện +countdown+ bắt đầu với +n = 3+, và do +n+ lớn hơn 0, pass:[<br/>&#8193;&#8193;&#8193;]nó đưa ra giá trị 1, và rồi gọi chính nó ...

pass:[&#8193;&#8193;&#8193;]Việc thực hiện +countdown+ bắt đầu với +n = 3+, và do +n+ không còn lớn hơn pass:[<br/>&#8193;&#8193;&#8193;&#8193;]0, nó đưa ra dòng chữ “Bùm!” và rồi quay về.

pass:[&#8193;&#8193;]Hàm countdown ứng với +n = 1+ quay về.

pass:[&#8193;]Hàm countdown ứng với +n = 2+ quay về.

Hàm countdown ứng với +n = 3+ quay về.

Và rồi bạn trở về với +Main+.

Một hàm gọi chính nó được gọi tên là _đệ quy_; quy trình tương ứng cũng được gọi là _đệ quy_.
(((hàm đệ quy)))(((đệ quy)))

Một ví dụ khác, ta có thể viết một hàm để in một chuỗi latexmath:[\(n\)] lần.
(((printn)))((("hàm", "tự định nghĩa", "printn", see="printn")))

[source,julia]
----
function printn(s, n)
    if n ≤ 0
        return
    end
    println(s)
    printn(s, n-1)
end
----

Nếu +n pass:[&lt;]= 0+ thì câu lệnh +return+ sẽ kết thúc hàm ngay. Luồng thực thi của chương trình sẽ lập tức trở về với nơi gọi nó, và phần còn lại của hàm sẽ không được thực hiện.
(((return)))((("từ khóa", "return", see="return")))(((lệnh trở lại)))((("lệnh", "return", see="lệnh trở lại")))

Phần còn lại của hàm cũng giống như +countdown+: nó sẽ hiển thị +s+ và sau đó sẽ gọi chính nó để in lại +s+ thêm latexmath:[\(n-1\)] lần nữa. Như vậy số dòng kết quả sẽ là latexmath:[\(1 + (n - 1)\)], tức là bằng latexmath:[\(n\)].

Với những ví dụ đơn giản như trên, có thể sẽ dễ hơn nếu ta dùng một vòng lặp +for+. Nhưng sau này ta sẽ gặp những ví dụ mà ở đó rất khó viết một vòng lặp +for+ còn viết bằng đệ quy sẽ dễ hơn, vì vậy việc làm quen với đệ quy từ sớm là rất tốt.

=== Sơ đồ ngăn xếp cho các hàm đệ quy

Trong Mục <<stack_diagrams>>, chúng ta đã dùng một sơ đồ ngăn xếp để biểu thị trạng thái của một chương trình trong quá trình hàm được gọi. Loại biểu đồ này cũng có thể được dùng để diễn giải hàm đệ quy.
(((sơ đồ ngăn xếp)))

Mỗi khi hàm được gọi, Julia tạo ra một “khung” mới cho hàm, trong đó có chứa các biến cục bộ và tham số của hàm. Đối với hàm đệ quy, có thể cùng một thời điểm trên ngăn xếp sẽ tồn tại nhiều khung hàm.
(((khung)))

[[fig05-1]]
.Sơ đồ ngăn xếp
image::images/fig51.svg[]


<<fig05-1>> minh hoạ một sơ đồ ngăn xếp cho hàm +countdown+ khi gọi với +n = 3+.

Như thường lệ, đỉnh của ngăn xếp là một khung cho +Main+. Nó trống không vì ta không tạo ra bất cứ biến nào trong +Main+ hay chuyển đối số nào cho nó.

Bốn khung +countdown+ có các giá trị khác nhau cho tham số +n+. Đáy của ngăn xếp, ở đó +n = 0+, được gọi là _trường hợp cơ sở_. Nó không thực hiện lời gọi đệ quy, do đó không có thêm khung nào.
(((trường hợp cơ sở)))

===== Bài tập 5-1

Hãy vẽ một biểu đồ ngăn xếp cho +printn+ khi gọi với +s = "Hello"+ và +n = 2+. Sau đó viết một hàm có tên +do_n+ để nhận các đối số gồm một đối tượng hàm và một số, +n+, gọi hàm được đã cho đúng latexmath:[\(n\)] lần.

=== Đệ quy vô hạn

Nếu một quá trình đệ quy không bao giờ đạt đến trường hợp cơ bản, nó tiếp tục thực hiện gọi hàm đệ quy mãi mãi, và chương trình không bao giờ kết thúc. Đây là _đệ quy vô hạn_, và là điều ta thường tránh khi lập trình. Sau đây là một chương trình đơn giản nhất có đệ quy vô hạn:
(((đệ quy vô hạn)))(((recurse)))((("hàm", "tự định nghĩa", "recurse", see="recurse")))

[source,julia]
----
function recurse()
    recurse()
end
----

Trong phần lớn các ngôn ngữ lập trình, một chương trình có đệ quy vô hạn sẽ không chạy mãi mãi. Julia thông báo một lỗi khi chương trình đạt đến mức độ sâu đệ quy tối đa:

[source,jlcon]
----
julia> recurse()
ERROR: StackOverflowError:
Stacktrace:
 [1] recurse() at ./REPL[1]:2 (repeats 80000 times)
----

Lần này kết quả dò ngược lớn hơn một chút so với ở chương trước. Khi một lỗi xảy ra, có 80000 khung hàm +recurse+ trên ngăn xếp!
(((dò ngược)))(((StackOverflowError)))((("lỗi", "Core", "StackOverflowError", see="StackOverflowError")))

Nếu bạn tình cờ gặp phải đệ quy vô hạn, hãy rà soát lại hàm đã viết để chắc rằng có một trường hợp cở sở không gọi đến đệ quy. Và nếu đã có trường hợp cơ sở rồi, thì kiểm tra đảm bảo rằng có thể chạy đến trường hợp cơ sở này.


=== Đầu vào từ bàn phím

Cho đến giờ, các chương trình ta đã viết đều không cho người dùng nhập số liệu vào. Lần nào chương trình cũng thực hiện công việc y như nhau.

Julia cung cấp một hàm dựng sẵn, có tên là +readline+ để tạm dừng chương trình và chờ người dùng nhập thông tin từ bàn phím. Đến khi người dùng gõ phím +RETURN+ hoặc +ENTER+, chương trình chạy tiếp và +readline+ trả lại những gì người dùng đã gõ vào dưới dạng chuỗi.
(((readline)))((("hàm", "Base", "readline", see="readline")))

[source,jlcon]
----
julia> text = readline()
Bạn đang chờ đợi gì?
"Bạn đang chờ đợi gì?"
----

Trước khi nhận thông tin từ người dùng, có thể sẽ tốt hơn nếu ta in ra một lời nhắc để cho người dùng biết cần nhập vào điều gì:
(((dấu nhắc)))

[source,jlcon]
----
julia> print("Tên bạn là gì? "); readline()
Tên bạn là gì? Arthur, Vua xứ Britons!
"Arthur, Vua xứ Britons!"
----

Dấu chấm phẩy +;+ cho phép ta đặt nhiều câu lệnh trên cùng một dòng. Trong REPL, chỉ mỗi câu lệnh cuối cùng trả lại giá trị.
(((;)))

Nếu bạn trông đợi người dùng nhập vào một số nguyên, hãy thử chuyển đổi giá trị thu được sang kiểu +Int64+:

[source,jlcon]
----
julia> println("Một con chim én tự do có thể bay nhanh bao nhiêu?"); speed = readline()
Một con chim én tự do có thể bay nhanh bao nhiêu?
42
"42"
julia> parse(Int64, speed)
42
----

Nhưng nếu người dùng nhập vào những thứ khác một chuỗi thì sẽ bị lỗi:
(((parse)))

[source,jlcon]
----
julia> println("Một con chim én tự do có thể bay nhanh bao nhiêu? "); speed = readline()
Một con chim én tự do có thể bay nhanh bao nhiêu?
Ý của bạn là sao, một con én châu Phi hay châu Âu?
"Ý của bạn là sao, một con én châu Phi hay châu Âu?"
julia> parse(Int64, speed)
ERROR: ArgumentError: invalid base 10 digit 'W' in "Ý của bạn là sao, một con én châu Phi hay châu Âu?"
[...]
----

Trong các phần sau chúng ta sẽ xem xét cách khắc phục lỗi này.
(((ArgumentError)))


=== Gỡ lỗi

Khi xảy ra lỗi cú pháp hoặc lỗi thực thi, lời thông báo lỗi sẽ chứa rất nhiều thông tin, nhưng có thể sẽ quá mức cần thiét. Thường những phần quan trọng nhất cần biết là:
(((gỡ lỗi)))

* Lỗi này thuộc loại gì, và

* Nó xuất hiện ở đâu?

Các lỗi cú pháp thường dễ tìm, nhưng cũng có vài chỗ gây bất ngờ. Nói chung, các thông báo lỗi đều chỉ ra trục trặc được phát hiện ở đâu, nhưng lỗi thực sự lại có thể nằm ở trước đó trong đoạn mã lệnh, đôi khi là ở dòng ngay trước đó.

Điều tương tự cũng đúng với các lỗi thực thi. Chẳng hạn bạn đang thử tính tỉ số tín hiệu so với nhiễu động theo đơn vị đềxiben. Công thức tính là 

[latexmath]
++++
\begin{equation}
{SNR_{\mathrm{db}} = 10 \log_{10} \frac{P_{\mathrm{signal}}}{P_{\mathrm{noise}}}\ .}
\end{equation}
++++

Trong Julia, bạn có thể viết một đoạn mã giống như sau:

[source,julia]
----
signal_power = 9
noise_power = 10
ratio = signal_power ÷ noise_power
decibels = 10 * log10(ratio)
print(decibels)
----

Và nhận được:

[source,julia]
----
-Inf
----

Đây không phải là kết quả mong đợi.

Để tìm lỗi thực sự, có thể bạn cần phải in ra giá trị của ratio, hoá ra nó bằng 0. Vậy trục trặc xảy ra ở dòng 3, ở dòng này bạn đã dùng phép chia lấy phần nguyên thay vì phép chia số có dấu phẩy động.

[WARNING]
====
Bạn nên dành thời gian đọc thông báo lỗi cẩn thận, nhưng đừng cho rằng tất cả những gì trong lời thông báo đó đều đúng.
====


=== Thuật ngữ

chia lấy phần nguyên::
Toán tử kí hiệu là +÷+, thực hiện chia hai số rồi làm tròn xuống (về phía âm vô cực) để được một số nguyên.
(((chia lấy phần nguyên)))

toán tử chia dư::
Toán tử, kí hiệu là dấu phần trăm, (%), được dùng với các số nguyên và trả lại phần dư của phép chia hai số đó.
(((toán tử chia dư)))

biểu thức Boole::
Biểu thức có giá trị là +true+ (đúng) hoặc +false+ (sai).
(((biểu thức Boole)))

toán tử quan hệ::
Một trong các toán tử để so sánh các toán hạng của nó: +==+, +≠+ (+!=+), +>+, +<+, +≥+ (+>=+), và +≤+ (+pass:[&lt;=]+).
(((toán tử quan hệ)))

toán tử lôgic::
Một trong các toán tử để kết hợp các biểu thức Boole: +&&+ (và), +||+ (hoặc), và +!+ (phủ định).
(((toán tử lôgic)))

câu lệnh điều kiện::
Câu lệnh để điều khiển dòng thực hiện chương trình tuỳ theo một điều kiện nào đó.
(((câu lệnh điều kiện)))

điêu kiện::
Biểu thức Boole trong một câu lệnh điều kiện để quyết định nhánh nào sẽ được thực hiện.
(((điêu kiện)))

câu lệnh ghép::
Câu lệnh bao gồm một đoạn đầu và một phần thân. Phần thân được kết thúc bởi từ khóa +end+.
(((câu lệnh ghép)))

nhánh::
Một trong số các phương án trong một câu lệnh điều kiện.
(((nhánh)))

câu lệnh điều kiện xâu chuỗi::
Câu lệnh điều kiện với một chuỗi liên tiếp các nhánh phương án.
(((câu lệnh điều kiện xâu chuỗi)))

câu lệnh điều kiện lồng::
Câu lệnh điều kiện xuất hiện bên trong của một trong số các nhánh của một câu lệnh điều kiện khác.
(((câu lệnh điều kiện lồng)))

câu lệnh trở lại::
Một câu lệnh khiến cho hàm lập tức kết thúc và trở lại chỗ mã lệnh gọi đến hàm.
(((câu lệnh trở lại)))

đệ quy::
Quá trình gọi hàm mà hiện thời đang được thực thi.
(((đệ quy)))

trường hợp cơ sở::
Nhánh điều kiện trong một hàm đệ quy mà bản thân không gọi đệ quy.
(((trường hợp cơ sở)))

đệ quy vô hạn::
Đệ quy mà không có trường hợp cơ sở, hoặc không bao giờ đạt đên trường hợp cơ sở. Đệ quy vô hạn cuối cùng sẽ gây ra lỗi thực thi.
(((đệ quy vô hạn)))


=== Bài tập

[[ex05-1]]
===== Bài tập 5-2

Hàm +time+ trả lại thời gian Greenwich Mean Time hiện tại, tính bằng giây, kể từ “mốc epoch”, vốn là một thời điểm được chọn làm mốc tham chiếu. Trên các hệ thống UNIX, mốc epoch là 1/1/1970.
(((time)))((("function", "Base", "time", see="time")))

[source,@julia-repl]
----
time()
----

Hãy viết một văn lệnh để đọc vào thời điểm hiện tại rồi quy đổi thành một thời điểm trong ngày dưới dạng số giờ, phút, giây, cùng số ngày tính từ mốc epoch.

[[ex05-2]]
===== Bài tập 5-3

Định lý cuối cùng của Fermat phát biểu rằng không có các số nguyên latexmath:[\(a\)], latexmath:[\(b\)], và latexmath:[\(c\)] nào thoả mãn
(((định lý cuối cùng của Fermat)))

[latexmath]
++++
\begin{equation}
{a^n + b^n = c^n}
\end{equation}
++++

với bất kì giá trị nào của latexmath:[\(n\)] lớn hơn 2.

. Viết một hàm có tên là +check_fermat+ nhận vào bốn tham số—+a+, +b+, +c+ và +n+—rồi kiểm tra xem có thoả mãn định lý Fermat không. Nếu +n+  lớn hơn 2 và +pass:[a^n + b^n == c^n]+ thì chương trình sẽ in ra “Trời, Fermat đã lầm!” Còn nếu không thì chương trình sẽ in ra, “Không, vẫn không đúng”.
(((checkfermat)))((("hàm", "tự định nghĩa", "checkfermat", see="checkfermat")))

. Viết một hàm nhắc người dùng nhập vào các giá trị của +a+, +b+, +c+ và +n+, quy đổi chúng thành số nguyên và dùng +checkfermat+ để kiểm tra xem liệu chúng có vi phạm định lý Fermat hay không.

[[ex05-3]]
===== Bài tập 5-4

Nếu bạn có trong tay ba thanh thẳng, bạn có thể hoặc không thể xếp thành một hình tam giác. Chẳng hạn, nếu một thanh dài 30 cm và hai thanh kia chỉ đều chỉ dài 3 cm, rõ ràng là bạn không thể làm cho hai thanh ngắn nối với nhau được. Với ba thanh có độ dài bất kì, có một cách đơn giản để kiểm tra xem chúng có tạo nên hình tam giác được không:

[TIP]
====
Nếu bất kì một độ dài nào lớn hơn tổng hai độ dài còn lại thì bạn không thể tạo thành tam giác. Ngược lại, bạn có thể. (Nếu tổng hai độ dài bằng độ dài thứ ba thì chúng sẽ tạo ra một “tam giác suy biến”.)
====

. Viết một hàm có tên là +istriangle+  nhận vào ba tham số là các số nguyên, sau đó in ra “Yes” hoặc “No”, tuỳ theo bạn có thể hay không thể tạo thành hình tam giác từ ba thanh với các độ dài đó.
(((istriangle)))((("hàm", "tự định nghĩa", "istriangle", see="istriangle")))

. Viết một hàm nhắc người dùng nhập vào độ dài ba thanh, chuyển thành dạng số nguyên, rồi dùng +istriangle+ để kiểm tra xem ba thanh với các độ dài đó có thể được xếp thành tam giác hay không.

[[ex05-4]]
===== Bài tập 5-5

Kết quả đầu ra của chương trình sau là gì? Hãy vẽ một sơ đồ ngăn xếp cho thấy trạng thái của chương trình khi nó in ra kết quả.
(((sơ đồ ngăn xếp)))(((recurse)))

[source,julia]
----
function recurse(n, s)
    if n == 0
        println(s)
    else
        recurse(n-1, n+s)
    end
end

recurse(3, 0)
----

. Điều gì sẽ xảy ra nếu bạn gọi hàm này như sau: +recurse(-1, 0)+?

. Hãy viết một chuỗi docstring đẻ giải thích cho người khác biết những gì cần (vừa đủ) để sử dụng hàm này.

Bài tập tiếp theo đây dùng module +ThinkJulia+ module, đã mô tả ở <<chap04>>:

[[ex05-5]]
===== Bài tập 5-6

Hãy đọc hàm sau đây và thử xem bạn có thể hình dung được mục đích của nó không (xem các ví dụ ở <<chap04>>). Sau đó thì chạy nó và đối chiếu với phán đoán của bạn.

[source,julia]
----
function draw(t, length, n)
    if n == 0
        return
    end
    angle = 50
    forward(t, length*n)
    turn(t, -angle)
    draw(t, length, n-1)
    turn(t, 2*angle)
    draw(t, length, n-1)
    turn(t, -angle)
    forward(t, -length*n)
end
----

[[ex05-6]]
===== Bài tập 5-7

[[fig05-2]]
.A Koch curve
image::images/fig52.svg[]


Đường cong Koch là một hình phân mảnh (fractal) có dạng như <<fig05-2>>. Để vẽ một đường cong Koch với độ dài latexmath:[\(x\)], tất cả những việc bạn cần làm là
(((đường cong Koch)))(((phân mảnh)))

. Vẽ một đường cong Koch với độ dài latexmath:[\(\frac{x}{3}\)].

. Quay trái 60 độ.

. Vẽ một đường cong Koch với độ dài latexmath:[\(\frac{x}{3}\)].

. Quay phải 120 độ.

. Vẽ một đường cong Koch với độ dài latexmath:[\(\frac{x}{3}\)].

. Quay trái 60 độ.

. Vẽ một đường cong Koch với độ dài latexmath:[\(\frac{x}{3}\)].

Ngoại lệ duy nhất là nếu latexmath:[\(x\)] nhỏ hơn 3. Trong trường hợp đó, bạn chỉ cần vẽ một đoạn thẳng có độ dài latexmath:[\(x\)].

. Viết một hàm có tên là +koch+ nhận vào các tham số là một con rùa và một độ dài, sau đó dùng con rùa để vẽ một đường cong Koch với độ dài cho trước đó.
(((koch)))((("hàm", "tự định nghĩa", "koch", see="koch")))

. Viết một hàm có tên là +snowflake+  để vẽ ba đường cong Koch nối thành hình một bông tuyết.
(((snowflake)))((("hàm", "tự định nghĩa", "snowflake", see="snowflake")))

. Có một số cách khái quát hoá đường cong Koch. Hãy xem các ví dụ ở https://en.wikipedia.org/wiki/Koch_snowflake và viết mã lệnh cho ví dụ mà bạn thích.

