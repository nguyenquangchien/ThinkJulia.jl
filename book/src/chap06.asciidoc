[[chap06]]
== Các hàm kết quả

Nhiều hàm Julia mà ta đã dùng, như các hàm toán học, đều trả lại kết quả. Nhưng các hàm ta đã viết đến giờ đều là hàm không kết quả: chúng có hiệu ứng, như in giá rị hoặc di chuyển con rùa, nhưng các hàm như vậy trả lại +nothing+. Ở chương này, chúng ta sẽ học cách viết những hàm có trả lại kết quả.
(((hàm kết quả)))


=== Các giá trị được trả về

Việc gọi hàm sẽ tạo ra một giá trị, mà chúng ta thường gán vào một biến hoặc sử dụng như một phần của một biểu thức.

[source,julia]
----
e = exp(1.0)
height = radius * sin(radians)
----

Tất cả các hàm chúng ta đã viết đều là hàm rỗng. Nói nôm na, hàm như vậy không trả kết quả; chính xác hơn, kết quả trả lại là  +nothing+. Trong chương này, (cuối cùng thì) chúng ta (cũng) viết những hàm kết quả. Ví dụ đầu tiên là +area+, có nhiệm vụ trả lại diện tích của một hình tròn với bán kính cho trước:
(((nothing)))(((area)))((("hàm", "tự định nghĩa", "area", see="area")))

[source,@julia-setup]
----
function area(radius)
    a = π * radius^2
    return a
end
----

Ta đã thấy câu lệnh +return+ từ trước rồi, nhưng trong một hàm kết quả, lệnh +return+ bao gồm một biểu thức. Câu lệnh này có nghĩa là: “Lập tức trở về chương trình chính và dùng biểu thức bên cạnh để làm giá trị để trả lại”. Vì biểu thức có thể phức tạp tù ý nên chúng ta có thể viết hàm trên gọn lại như sau:
(((return (lệnh))))

[source,@julia-setup]
----
function area(radius)
    π * radius^2
end
----

Giá trị trả lại bởi hàm là giá trị của biểu thức cuối cùng được ước lượng, và theo mặc dịnh là biểu thức cuối cùng trong phần thân lời định nghĩa hàm.

Mặt khác, các _biến tạm thời_ như +a+ và lệnh +return+ có thể giúp cho việc gỡ lỗi dễ dàng hơn.
(((biến tạm thời)))

Đôi khi ta cần có nhiều câu lệnh +return+, mỗi lệnh ở một nhánh của lệnh điều kiện:
(((absvalue)))((("hàm", "tự định nghĩa", "absvalue", see="absvalue")))

[source,@julia-setup chap06]
----
function absvalue(x)
    if x < 0
        return -x
    else
        return x
    end
end
----

Vì các lệnh return này ở các nhánh điều kiện độc lập với nhau, luôn chỉ có một trong số đó được thực hiện.
(((phương án điều kiện)))

Ngay khi một lệnh +return+ được thực hiện, hàm sẽ kết thúc mà không thực hiện bất cứ lệnh nào tiếp sau nó. Mã lệnh xuât hiện sau dòng lệnh +return+, hay trong bất cứ chỗ nào khác của chương trình mà không nằm trong luồng thực thi thì được gọi là _mã lệnh chết_.
(((luồng thực thi)))(((mã lệnh chết)))

Trong một hàm kết quả, ta nên đảm bảo rằng mỗi luồng thực hiện khả dĩ đều dẫn tới một lệnh return. Chẳng hạn:

[source,@julia-setup chap06]
----
function absvalue(x)
    if x < 0
        return -x
    end
    if x > 0
        return x
    end
end
----

Hàm này không chính xác vì nếu chẳng may +x+ bằng 0 thì không có điều kiện nào được thoả mãn, và hàm sẽ kết thúc mà không gặp phải lệnh +return+ nào. Nếu dòng thực hiện đến được cuối của hàm thì giá trị trả về sẽ là +nothing+, không phải là giá trị tuyệt đối của 0.

[source,@julia-repl-test chap06]
----
julia> show(absvalue(0))
nothing
----

[TIP]
====
Julia có sẵn một hàm tên là +abs+ để tính giá trị tuyệt đối.
(((abs)))((("hàm", "Base", "abs", see="abs")))
====

===== Bài tập 6-1

Viết một hàm tên là +compare+ để nhận vào hai giá trị, +x+ và +y+, rồi trả lại +1+ nếu +x > y+, +0+ nếu +x == y+, và +-1+ nếu +x < y+.


[[incremental_development]]
=== Phát triển tăng dần

Khi bạn viết các hàm lớn hơn, có thể bạn sẽ dành nhiều thời gian để gỡ lỗi.
(((gỡ lỗi)))

Để giải quyết các chương trình với mức độ phức tạp ngày càng cao, bạn có thể thử một quy trình gọi là _phát triển tăng dần_. Mục tiêu của phát triển tăng dần là tránh mất thời gian gỡ lỗi bằng cách mỗi lúc chỉ thêm vào và thử nghiệm một đoạn mã lệnh rất ngắn.
(((phát triển tăng dần)))

Ở ví dụ này, bạn cần tìm khoảng cách giữa hai điểm cho bởi các toạ độ latexmath:[\(\left(x_1, y_1\right)\)] và latexmath:[\(\left(x_2, y_2\right)\)]. Theo định lý Py-ta-go, khoảng cách sẽ là:
(((Py-ta-go (định lý))))

[latexmath]
++++
\begin{equation}
{d = \sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}}
\end{equation}
++++

Bước đầu tiên là cân nhắc xem một hàm +distance+ trong Julia sẽ trông như thế nào. Nói cách khác, các số liệu đầu vào (tham số) và kết quả (giá trị trả lại) là gì?

Trong trường hợp này, số liệu đầu vào mô tả hai điểm; ta có thể biểu thị chúng bằng bốn số. Giá trị cần trả về là khoảng cách, tức là một giá trị số có phần thập phân.

Bạn đã có thể phác thảo ngay ra hàm như sau:
(((distance)))((("hàm", "tự định nghĩa", "distance", see="distance")))

[source,@julia-setup chap06]
----
function distance(x₁, y₁, x₂, y₂)
    0.0
end
----

Dĩ nhiên là mã lệnh trên chưa tính được khoảng cách; nó luôn trả về số không. Nhưng về mặt cú pháp thì nó đúng, và nó chạy được, nghĩa là bạn có thể thử nghiệm nó trước khi làm cho nó phức tạp thêm. Các chỉ só dưới đều sẵn có bằng kí tự bộ mã Unicode (*+\_1 TAB+*, *+\_2 TAB+*, v.v.).
(((kí tự Unicode)))

Để thử nghiệm hàm mới viết, hãy gọi nó với các đối số ví dụ:

[source,@julia-repl-test chap06]
----
distance(1, 2, 4, 6)
----

Sở dĩ tôi chọn các tham số này vì khoảng cách ngang sẽ là 3 và khoảng cách dọc là 4, theo đó thì kết quả sẽ bằng 5 (cạnh huyền của một tam giác có các cạnh là 3-4-5). Khi thử nghiệm một hàm, bạn nên biết trước kết quả đúng.

Đến lúc này, chúng ta có thể khẳng định rằng hàm đã đúng về mặt cú pháp, và chúng ta sẽ thêm mã lệnh vào phần thân. Một bước làm hợp lí tiếp theo là tính các hiệu số latexmath:[\(x_2 - x_1\)] và latexmath:[\(y_2 - y_1\)]. Đoạn mã tiếp theo sẽ lưu giữ các giá trị trên vào các biến tạm thời và in chúng ra bằng macro +@show+.
((("@show")))((("macro", "Base", "@show", see="@show")))

[source,@julia-setup]
----
function distance(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    @show dx dy
    0.0
end
----

Nếu hàm số hoạt động được, nó sẽ hiển thị +dx = 3+ và +dy = 4+. Nếu vậy, chúng ta biết rằng hàm đã nhận các đối số đúng và thực hiện chính xác phép tính đầu tiên. Nếu không, chúng ta chỉ cần phải kiểm tra một só ít các dòng lệnh.

Tiếp theo chúng ta tính tổng các bình phương của +dx+ và +dy+:

[source,@julia-setup]
----
function distance(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    d² = dx^2 + dy^2
    @show d²
    0.0
end
----

Một lần nữa, bạn có thể chạy đoạn mã này và kiểm tra kết quả thu được (nó phải bằng 25). Các hệ số mũ cũng sẵn có bằng cách gõ  *+\^2 TAB+*. Cuối cùng, bạn có thể dùng +sqrt+ để tính toán và trả lại kết quả:
(((sqrt)))

[source,@julia-setup]
----
function distance(x₁, y₁, x₂, y₂)
    dx = x₂ - x₁
    dy = y₂ - y₁
    d² = dx^2 + dy^2
    sqrt(d²)
end
----

Nếu đoạn mã trên hoạt động tốt, bạn đã giải quyết xong. Nếu không, bạn có thể sẽ cần phải in giá trị của +sqrt(d²)+ trước câu lệnh +return+.

Mã lệnh trên là phiên bản cuối cùng của hàm; nó không hiển thị gì khi được chạy mà chỉ trả lại một giá trị. Các câu lệnh print mà chúng ta thêm vào chỉ hữu ích khi gỡ lỗi, nhưng một khi đã viết được hàm rồi thì ta cần phải bỏ chúng đi. Các câu lệnh thêm vào như vậy còn có tên là _mã lệnh giàn đỡ_ vì nó có ích cho việc xây dựng chương trình (về hình tượng, giống như giàn giáo để đỡ) nhưng lại không phải là một phần trong sản phẩm cuối cùng.
(((mã lệnh giàn đỡ)))

Khi mới tập lập trình, mỗi lúc bạn chỉ nên viết thêm một hoặc hai dòng lệnh. Sau này khi đã có kinh nghiệm, bạn sẽ viết và gỡ lỗi những khối lệnh lớn hơn. Dù theo cách nào đi nữa, việc phát triển tăng dần sẽ giúp bạn tiết kiệm nhiều thời gian dành cho gỡ lỗi.

Các điểm cơ bản của quy trình này là:

. Bắt đầu với một chương trình chạy được và thêm vào những thay đổi nhỏ. Bất cứ lúc nào khi gặp lỗi, bạn sẽ phát hiện được ngay lỗi đó ở đâu.

. Dùng các biến tạm để lưu giữ các giá trị trung gian, từ đó bạn có thể hiển thị và kiểm tra chúng.

. Một khi chương trình đã hoạt động, bạn có thể dỡ bỏ các đoạn mã “giàn đỡ”, hoặc rút gọn nhiều câu lệnh về một biểu thức phức hợp, nếu việc này không làm cho chương trình trở nên khó đọc hơn.

===== Bài tập 6-2

Hãy dùng cách phát triển tăng dần để viết một hàm tên là +hypotenuse+ để trả lại chiều dài của cạnh huyền trong một tam giác vuông khi biết các đối số là chiều dài hai cạnh góc vuông. Hãy ghi lại từng bước phát triển trong quá trình làm.


=== Ghép hàm

Đến bây giờ, bạn có thể trông đợi việc gọi một hàm từ bên trong một hàm khác. Lấy ví dụ, ta sẽ viết một hàm nhận vào hai điểm là tâm của đường tròn và một điểm trên đường tròn đó, rồi tính diện tích của hình tròn.
(((ghép)))

Giả sử như toạ độ của tâm điểm được lưu trong các biến +xc+ và +yc+, toạ độ điểm trên đường tròn là +xp+ và +yp+. Bước đầu tiên sẽ là tìm bán kính của đường tròn, vốn là khoảng cách giữa hai điểm đó. Ta vừa mới viết một hàm distance để làm việc này:

[source,julia]
----
radius = distance(xc, yc, xp, yp)
----

Bước tiếp theo là tìm diện tích của một đường tròn có bán kính đó; chúng ta cũng vừa viết một hàm thực hiện điều này:

[source,julia]
----
result = area(radius)
----

Kết hợp hai bước này vào trong cùng một hàm, ta thu được:
(((circlearea)))((("hàm", "tự định nghĩa", "circlearea", see="circlearea")))

[source,@julia-setup]
----
function circlearea(xc, yc, xp, yp)
    radius = distance(xc, yc, xp, yp)
    result = area(radius)
    return result
end
----

Các biến tạm thời  +radius+ và +result+ có ích cho việc phát triển và gỡ lỗi chương trình, nhưng một khi chương trình đã hoạt động tốt, ta có thể rút gọn nó lại bằng cách kết hợp các lời gọi hàm:
(((biến tạm thời)))

[source,@julia-setup]
----
function circlearea(xc, yc, xp, yp)
    area(distance(xc, yc, xp, yp))
end
----


[[boolean_functions]]
=== Các hàm Boole

Các hàm có thể trả lại giá trị Boole, vốn rất tiện dụng cho việc ẩn giấu các phép kiểm tra phức tạp vào trong một hàm. Chẳng hạn:
(((boolean function)))(((isdivisible)))((("hàm", "tự định nghĩa", "isdivisible", see="isdivisible")))

[source,@julia-setup chap06]
----
function isdivisible(x, y)
    if x % y == 0
        return true
    else
        return false
    end
end
----

Một cách làm thông thường là đặt tên các hàm Boole cho giống với các câu hỏi có/không. Chẳng hạn (tiếng Anh: có chia hết) +isdivisible+ trả lại +true+ hoặc +false+ để chỉ định rằng +x+ có chia hết cho +y+ hay không.

Sau đây là một ví dụ:

[source,@julia-repl-test chap06]
----
julia> isdivisible(6, 4)
false
julia> isdivisible(6, 3)
true
----

Kết quả của toán tử +==+ là một giá trị Boole, vì vậy ta có thể viết hàm gọn lại bằng cách trả lại giá trị trực tiếp như sau:
(((==)))

[source,@julia-setup]
----
function isdivisible(x, y)
    x % y == 0
end
----

Các hàm Boole thường được dùng trong các câu lệnh điều kiện:
(((câu lệnh điều kiện)))

[source,julia]
----
if isdivisible(x, y)
    println("x is divisible by y")
end
----

Có thể bạn sẽ muốn viết:

[source,julia]
----
if isdivisible(x, y) == true
    println("x chia hết cho y")
end
----

Nhưng phép so sánh thêm với +true+ là hoàn toàn thừa.

===== Bài tập 6-3

Hãy viết một hàm +isbetween(x, y, z)+ để trả lại +true+ nếu +x ≤ y ≤ z+ hoặc +false+ trong trường hợp còn lại.


=== Nói thêm về đệ quy

Chúng ta mới chỉ tìm hiểu một phần nhỏ của Julia, nhưng bạn có thể muốn biết rằng liệu phần nhỏ này có phải là một ngôn ngữ lập trình _đầy đủ_ hay không, có nghĩa là dùng nó có thể diễn giải được mọi bài toán hay không. Bất kì chương trình máy tính nào cũng có thể được viết lại chỉ dùng những đặc điểm ngôn ngữ mà chúng ta đã xét đến (thực ra, bạn cần thêm một số lệnh để điều khiển các thiết bị như bàn phím, chuột, ổ đĩa, v.v…, nhưng đó là tất cả những điều cần thiết).
(((đệ quy)))(((complete programming language)))((("programming language", "complete", see="complete programming language")))

Việc chứng minh nhận định đó là một bài toán khó, lần đầu được Alan Turing đưa ra. Ông là một trong những nhà khoa học máy tính đầu tiên (có người cho rằng ông là một nhà toán học, song cũng có nhiều nhà khoa học máy tính thời sơ khai bấy giờ xuất thân từ toán học). Tương ứng với bài toán này là “luận đề Turing”. Để tìm hiểu cặn kẽ về luận án Turing, bạn nên đọc quyển sách _Introduction to the Theory of Computation_ (tạm dịch: “Nhập môn lí thuyết tính toán”) của Michael Sipser.
(((Turing, Alan)))(((luận đề Turing)))

Để cụ thể hoá tác dụng của những kiến thức lập trình mà bạn vừa được học, chúng ta hãy cùng lập một số hàm toán học theo cách đệ quy. Một định nghĩa đệ quy giống như việc định nghĩa vòng quanh; điểm tương đồng là trong phần định nghĩa lại có tham chiếu đến sự vật được định nghĩa. Nhưng cách định nghĩa vòng quanh thực thụ thì không mấy có tác dụng:
(((định nghĩa đệ quy)))(((định nghĩa vòng quanh)))

vorpal::
Một tính từ được dùng để miêu tả một sự vật vorpal.

Bạn hẳn sẽ bực mình khi thấy một định nghĩa kiểu như vậy trong cuốn từ điển. Ngược lại, khi bạn xem định nghĩa về giai thừa (được kí hiệu bằng dấu latexmath:[\(!\)] trong toán học, có thể bạn sẽ thấy:
(((giai thừa, hàm)))

[latexmath]
++++
\begin{equation}
{n! = 
\begin{cases}
  1& \textrm{if}\  n = 0 \\
  n (n-1)!& \textrm{if}\  n > 0
\end{cases}}
\end{equation}
++++
Định nghĩa này phát biểu rằng giai thừa của 0 là 1, và giai thừa của bất kì một giá trị nào khác, latexmath:[\(n\)], thì bằng latexmath:[\(n\)] nhân với giai thừa của latexmath:[\(n-1\)].

Theo đó latexmath:[\(3!\)] bằng 3 nhân với latexmath:[\(2!\)], vốn lại bằng 2 nhân latexmath:[\(1!\)],vốn bằng 1 nhân với latexmath:[\(0!\)]. Gộp tất cả lại, ta có latexmath:[\(3!\)] bằng 3 nhân 2 nhân 1 nhân 1, tức là bằng 6.

Nếu bạn có thể phát biểu một định nghĩa có tính đệ quy cho một hàm nào đó thì bạn cũng có thể viết một chương trình Julia để tính nó. Bước đầu tiên là xác định các tham số. Trong trường hợp này rõ ràng giai thừa nhận vào một số nguyên:
(((fact)))((("hàm", "tự định nghĩa", "fact", see="fact")))

[source,@julia-setup]
----
function fact(n) end
----

Nếu tham số bằng +0+, chúng ta chỉ cần trả lại giá trị +1+:

[source,@julia-setup]
----
function fact(n)
    if n == 0
        return 1
    end
end
----

Nếu điều đó không xảy ra (đây chính là phần hay nhất), chúng ta thực hiện lời gọi đệ quy để tính giai thừa của +n-1+ và sau đó nhân nó với +n+:

[source,@julia-setup]
----
function fact(n)
    if n == 0
        return 1
    else
        recurse = fact(n-1)
        result = n * recurse
        return result
    end
end
----

Luồng thực thi của chương trình này cũng giống như của chương trình +countdown+ trong <<recursion>>.Nếu ta gọi +fact+ với giá trị +3+:
(((luồng thực thi)))

[small]
--
Vì +3+ khác +0+, nên ta chọn nhánh thứ hai và tính giai thừa của +n-1+ ...

pass:[&#8193;]Vì +2+ khác +0+, nên ta chọn nhánh thứ hai và tính giai thừa của +n-1+ ...

pass:[&#8193;&#8193;]Vì +1+ khác +0+, nên ta chọn nhánh thứ hai và tính giai thừa của +n-1+ ...

pass:[&#8193;&#8193;&#8193;]Vì +0+ bằng +0+, nên ta chọn nhánh thứ nhất và trả lại giá trị +1+ mà không gọi đệ quy pass:[<br/>&#8193;&#8193;&#8193;&#8193;]thêm lần nào nữa.

pass:[&#8193;&#8193;]Giá trị được trả về, +1+, được nhân với +n+, vốn bằng +1+, và +result+ được trả lại.

pass:[&#8193;]Giá trị được trả về, +1+, được nhân với +n+, vốn bằng +2+, và +result+ được trả lại.

Giá trị được trả về +2+ được nhân với +n+, vốn bằng +3+, và kết quả, +6+, trở thành giá trị trả về của hàm ứng với lúc bắt đầu gọi đệ quy.
--

[[fig06-1]]
.Sơ đồ ngăn xếp
image::images/fig61.svg[]


<<fig06-1>> cho thấy nội dung của sơ đồ ngăn xếp khi một loạt các hàm được gọi.
(((sơ đồ ngăn xếp)))

Các giá trị trả lại như ở đây được chuyển về ngăn xếp. Ở mỗi khung, giá trị trả lại chính là giá trị của +result+, vốn là tích của +n+ và +recurse+.

Ở khung cuối cùng, các biến địa phương +recurse+ và +result+ do not exist, đều không tồn tại, vì nhánh tạo ra chúng không được thực hiện.

[TIP]
====
Julia có sẵn hàm +factorial+ để tính giai thừa của một số tự nhiên.
(((factorial)))((("hàm", "Base", "factorial", see="factorial")))
====


=== Đôi cánh niềm tin

Việc dõi theo luồng thực thi của chương trình là một cách đọc mã lệnh, nhưng bạn sẽ nhanh chóng lạc vào mê cung. Một cách làm khác mà tôi gọi là _đôi cánh niềm tin_ như sau. Khi bạn dò đến một lời gọi hàm, thay vì việc đi theo luồng thực thi, hãy coi như là hàm đó hoạt động tốt và trả lại kết quả đúng.
(((đôi cánh niềm tin)))

Thật ra, bạn đã từng mang “đôi cánh niềm tin” này khi dùng các hàm dựng sẵn. Mỗi khi gọi +cos+ hay +exp+, bạn không kiểm tra nội dung bên trong các hàm này. Bạn chỉ việc giả sử rằng chúng chạy được vì những người lập trình ra các hàm đó đều giỏi.

Cũng như vậy khi bạn gọi các hàm riêng của mình. Chẳng hạn, trong <<boolean_functions>>, chúng ta đã viết một hàm tên là +isdivisible+ để xác định xem một số có chia hết cho một số khác không. Một khi chúng ta tự thuyết phục rằng hàm này đã viết đúng—bằng cách kiểm tra và thử mã lệnh—chúng ta có thể sử dụng hàm mà không cần phải xem lại phần thân hàm nữa.

Điều tương tự cũng đúng với các chương trình đệ quy. Khi bạn đến điểm gọi đệ quy, thay vì đi theo luồng thực hiện, bạn cần phải coi rằng lời gọi đệ quy hoạt động tốt (tức là cho kết quả đúng) và sau đó tự hỏi mình “Giả dụ như ta đã tìm được giai thừa của latexmath:[\(n-1\)], liệu ta có tính được giai thừa của latexmath:[\(n\)] không?” Trong trường hợp này, rõ ràng là ta sẽ tính được, bằng cách nhân với latexmath:[\(n\)].

Dĩ nhiên là sẽ có chút kì lạ trong việc ta giả sử rằng hàm hoạt động tốt khi chưa viết xong nó, nhưng chính vì vậy mà ta gọi đó là đôi cánh niềm tin!

[[one_more_example]]
=== Thêm một ví dụ

Sau giai thừa, một ví dụ thông dụng khác về hàm toán học được định nghĩa theo cách đệ quy là dãy fibonacci. Hàm này được xác định như sau: (see https://en.wikipedia.org/wiki/Fibonacci_number):
(((fibonnaci, hàm)))

[latexmath]
++++
\begin{equation}
{fib(n) =
\begin{cases}
    0& \textrm{if}\  n = 0 \\
    1& \textrm{if}\  n = 1 \\
    fib(n-1) + fib(n-2)& \textrm{if}\  n > 1 
\end{cases}}
\end{equation}
++++

Theo ngôn ngữ của Julia, nó có dạng:
(((fib)))((("hàm", "tự định nghĩa", "fib", see="fib")))

[source,@julia-setup chap06]
----
function fib(n)
    if n == 0
        return 0
    elseif n == 1
        return 1
    else
        return fib(n-1) + fib(n-2)
    end
end
----

Nếu bạn thử gắng theo luồng thực hiện ở đây, ngay cả với các giá trị khá nhỏ của +n+, bạn sẽ đau đầu ngay. Nhưng với đôi cánh niềm tin, nếu bạn coi rằng cả hai lời gọi đệ quy đều hoạt động tốt, thì rõ ràng bạn sẽ thu được kết quả đúng khi cộng chúng lại với nhau.


=== Kiểm tra kiểu

Điều gì sẽ xảy ra nếu ta gọi +fact+ với đối số bằng +1.5+?
(((StackOverflowError)))

[source,jlcon]
----
julia> fact(1.5)
ERROR: StackOverflowError:
Stacktrace:
 [1] fact(::Float64) at ./REPL[3]:2
----

Dường như đó là đệ quy vô hạn. Nhưng sao có thể xảy ra điều này? Có một trường hợp cơ sở—khi +n == 0+. Nhưng nếu +n+ hông phải là số nguyên, chúng ta có thể _lỡ mất_ trường hợp cơ sở và đệ quy diễn ra mãi mãi.
(((đệ quy vô hạn)))

Ở lời gọi đệ quy thứ nhất, giá trị của +n+ bằng +0.5+. Ở lần tiếp theo, giá trị này bằng +-0.5+. Từ đó, nó ngày càng nhỏ hơn (càng âm), nhưng sẽ không bao giờ bằng được 0.

Chúng ta có hai sự lựa chọn. Một là thử khái quát hoá hàm giai thừa để làm việc được với các số phẩy động, hoặc ta có thể buộc +fact+ phải kiểm tra kiểu đối số của nó. Lựa chọn thứ nhất gắn với việc gọi hàm gamma và nó phần nào đã vượt ra ngoài phạm vi quyên sách này. Vì vậy ta sẽ xét đến cách thứ hai.
(((gamma, hàm)))

Ta có thể dùng toán tử dựng sẵn +isa+ để thẩm định kiểu của đối số. Khi đã dùng nó rồi, có thể khẳng định rằng đối số là số dương:
(((isa)))(((fact)))

[source,@julia-setup chap06]
----
function fact(n)
    if !(n isa Int64)
        error("Giai thừa chỉ được định nghĩa cho số nguyên.")
    elseif n < 0
        error("Giai thừa không được định nghĩa cho số nguyên âm.")
    elseif n == 0
        return 1
    else
        return n * fact(n-1)
    end
end
----

Trường hợp cơ sở thứ nhất xử lý các số không nguyên; trường hợp thứ hai bắt lỗi các số nguyên âm. Trong cả hai trường hợp, chương trinh đều in ra thông báo lỗi và trả về +nothing+ để biểu thị rằng có điều gì sai đã xảy ra:

[source,@julia-repl-test chap06]
----
julia> fact("fred")
ERROR: Giai thừa chỉ được định nghĩa cho số nguyên.
julia> fact(-2)
ERROR: Giai thừa không được định nghĩa cho số nguyên âm.
----

Nếu đạt cả hai lần kiểm tra, thi +n+ chắc chắn là một số nguyên dương, và ta có thể chứng minh rằng lời gọi đệ quy sẽ kết thúc.

Chương trình này minh hoạ cho một dạng lập trình đôi khi được gọi là _chốt bảo vệ_. Hai lệnh điều kiện đầu có vai trò bảo vệ đoạn mã lệnh tiếp theo khỏi những giá trị có thể gây ra lỗi. Những chốt bảo vệ này giúp ta chứng minh được tính đúng đắn của mã lệnh.
(((chốt bảo vệ)))

Ở <<catching_exceptions>> ta sẽ thấy một phương án linh hoạt khác để in ra thông báo lỗi: đó là phát biệt lệ.

[[deb06]]
=== Gỡ lỗi

Việc chia nhỏ một chương trình lớn thành những hàm con tự nó đã tạo ra những điểm kiểm soát để gỡ lỗi. Nếu một hàm không hoạt động, có thể có ba khả năng cần xét đến:
(((gỡ lỗi)))

* Các đối số mà hàm nhận vào có vấn đề; một điều kiện đầu bị vi phạm.
(((điều kiện đầu)))

* Bản thân hàm có vấn đề; một trạng thái cuối bị vi phạm.
(((trạng thái cuối)))

* Giá trị trả lại hoặc cách dùng giá trị này có vấn đề.

Để loại trừ khả năng thứ nhất, bạn có thể thêm vào một câu lệnh print tại điểm đầu của hàm để hiển thị các giá trị của đối số (và có thể cả kiểu của chúng nữa). Hoặc bạn có thể viết các đoạn mã kiểm tra những điều kiện đầu này một cách tường minh.

Nếu các tham số có vẻ tốt, hãy thêm một lệnh print vào trước mỗi lệnh return để hiển thị các giá trị được trả lại. Nếu có thể, hãy kiểm tra các kết quả theo cách thủ công. Cân nhắc việc gọi hàm với các giá trị mà ta dễ dàng kiểm tra kết quả (như ở <<incremental_development>>).

Nếu hàm số dường như hoạt động tốt, hãy xem lời gọi hàm để chắc rằng giá trị trả lại được dùng và dùng đúng.

Việc thêm các lệnh print vào đầu và cuối một hàm có thể giúp cho luông thực hiện được rõ ràng hơn. Chẳng hạn, sau đây là một dạng của hàm +fact+ với các lệnh print:
(((fact)))(((luồng thực thi)))(((lệnh print)))

[source,@julia-setup chap06]
----
function fact(n)
    space = " " ^ (4 * n)
    println(space, "giai thừa ", n)
    if n == 0
        println(space, "trả lại 1")
        return 1
    else
        recurse = fact(n-1)
        result = n * recurse
        println(space, "trả lại ", result)
        return result
    end
end
----

+space+  là một chuỗi các kí tự trắng để điều khiển mức độ thụt đầu dòng của chữ cần in ra:

[source,@julia-repl chap06]
----
fact(4)
----

Kiểu in kết quả này có thể sẽ rất tốt nếu bạn bị lẫn khi tìm luồng thực hiện. Để dựng “mã lệnh giàn đỡ” một cách hiệu quả cũng cần chút thời gian, nhưng thêm dàn giáo có thể giúp giảm thiểu việc gỡ lỗi.


=== Thuật ngữ

biến tạm thời::
Biến dùng để lưu một giá trị trung gian trong phép tính phức tạp.
(((biến tạm thời)))

đoạn mã chết::
Phần chương trình không bao giờ được thực hiện, thường là do nó xuất hiện sau một câu lệnh return.
(((đoạn mã chết)))

phát triển tăng dần::
Kế hoạch phát triển chương trình trong đó tránh gỡ lỗi bằng việc mỗi lúc chỉ thêm vào và kiểm thử một đoạn mã lệnh ngắn.
(((phát triển tăng dần)))(((kế hoạch phát triển chương trình)))

giàn đỡ::
Mã lệnh được dùng trong giai đoạn phát triển chương trình nhưng bị bỏ đi ở phiên bản chương trình cuối.
(((giàn đỡ)))

chốt bảo vệ::
Dạng mẫu lập trình trong đó có dùng một câu lệnh điều kiện để kiểm tra và xử lý các trường hợp có thể gây ra lỗi.
(((chốt bảo vệ)))


=== Bài tập

[[ex06-1]]
===== Bài tập 6-4

Vẽ sơ đồ ngăn xếp cho chương trình dưới đây. Chương trình sẽ in ra cái gì?

[source,@julia-setup]
----
function b(z)
    prod = a(z, z)
    println(z, " ", prod)
    prod
end

function a(x, y)
    x = x + 1
    x * y
end

function c(x, y, z)
    total = x + y + z
    square = b(total)^2
    square
end

x = 1
y = x + 1
println(c(x, y+3, x+y))
----

[[ex06-2]]
===== Bài tập 6-5

Hàm Ackermann, latexmath:[\(A(m, n)\)], được định nghĩa là:
(((hàm Ackermann)))

[latexmath]
++++
\begin{equation}
{A(m, n) =
\begin{cases}
              n+1& \textrm{if}\ m = 0 \\
        A(m-1, 1)& \textrm{if}\ m > 0\ \textrm{and}\ n = 0 \\
A(m-1, A(m, n-1))& \textrm{if}\ m > 0\ \textrm{and}\ n > 0.
\end{cases}}
\end{equation}
++++
Xem https://en.wikipedia.org/wiki/Ackermann_function. Viết một hàm có tên là +ack+ để tính hàm Ackermann. Sau đó dùng hàm đã viết để tính +ack(3, 4)+,kết quả đúng là 125. Điều gì sẽ xảy ra với các giá trị +m+ và +n+ lớn hơn?
(((ack)))((("hàm", "tự định nghĩa", "ack", see="ack")))

[[ex06-3]]
===== Bài tập 6-6

Một từ đối xứng là từ đọc xuôi ngược đều như nhau, chẳng hạn “noon” và “redivider”. Theo cách đệ quy, một từ sẽ là đối xứng nếu các chữ cái đầu và cuối là như nhau và phần giữa cũng là một từ đối xứng.
(((từ đối xứng)))

Dưới đây là các hàm nhận vào một đối số chuỗi và trả lại các chữ cái đầu, cuối và giữa:
(((first)))((("hàm", "tự định nghĩa", "first", see="first")))(((last)))((("hàm", "tự định nghĩa", "last", see="last")))(((middle)))((("hàm", "tự định nghĩa", "middle", see="middle")))

[source,@julia-setup]
----
function first(word)
    first = firstindex(word)
    word[first]
end

function last(word)
    last = lastindex(word)
    word[last]
end

function middle(word)
    first = firstindex(word)
    last = lastindex(word)
    word[nextind(word, first) : prevind(word, last)]
end
----

Chúng ta sẽ thấy cách hoạt động của chúng trong <<chap08>>

. Thử chạy các hàm này. Điều gì sẽ xảy ra khi bạn gọi +middle+ với một chuỗi chỉ có 2 chữ cái? 1 chữ cái? Vậy còn chuỗi trống, kí hiệu là +""+ không chứa chữ cái nào thì sao?

. Viết một hàm có tên là +ispalindrome+ nhận vào một đối số chuỗi và trả lại +true+ nếu đó là một từ đối xứng và +false+ nếu không phải. Hãy nhớ rằng bạn có thể dùng hàm dựng sẵn +length+ để biết độ dài của chuỗi.
(((ispalindrome)))((("hàm", "tự định nghĩa", "ispalindrome", see="ispalindrome")))(((length)))

[[ex06-4]]
===== Bài tập 6-7

Một số, latexmath:[\(a\)], là lũy thừa của latexmath:[\(b\)] nếu nó chia hết cho latexmath:[\(b\)] và latexmath:[\(\frac{a}{b}\)] cũng là một lũy thừa của latexmath:[\(b\)]. Hãy viết một hàm có tên là +ispower+ nhận vào các đối số +a+ và +b+ rồi trả lại +true+ nếu +a+ là lũy thừa của +b+.
(((ispower)))((("hàm", "tự định nghĩa", "ispower", see="ispower")))

[TIP]
====
Bạn sẽ phải nghĩ về trường hợp cơ sở.
====

[[ex06-5]]
===== Bài tập 6-8

Ước số chung lớn nhất (GCD, greatest common divisor) của latexmath:[\(a\)] và latexmath:[\(b\)] là số lớn nhất mà cả latexmath:[\(a\)] và latexmath:[\(b\)] đều chia hết cho nó..

Một cách tìm GCD của hai số là thuật toán Euclid, vốn dựa trên nhận xét rằng nếu như latexmath:[\(r\)] là số dư của phép chia latexmath:[\(a\)] cho latexmath:[\(b\)], thì +gcd(a, b) = gcd(b, r)+. Với trường hợp cơ sở, ta có thể lấy +gcd(a, 0) = a+.

Hãy viết một hàm có tên +gcd+ nhận vào hai tham số +a+ và +b+, sau đó trả lại ước số chung lớn nhất của chúng.
(((gcd)))((("hàm", "tự định nghĩa", "gcd", see="gcd")))

Nguồn: Bài tập này dựa theo một ví dụ từ cuốn sách _Structure and Interpretation of Computer Programs_ của Abelson và Sussman.

