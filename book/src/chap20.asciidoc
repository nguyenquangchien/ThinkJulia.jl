[[chap20]]
== Những mặt tốt: module Base và thư viện chuẩn

Julia đi kèm theo các phụ kiện. Module +Base+ chứa các hàm, kiểu dữ liệu và macro hữu dụng nhất. Chúng đều sẵn có trực tiếp trong Julia.
(((Base)))

Julia cũng cung cấp nhiều module chuyên dụng trong thư viện chuẩn (Standard Library) của nó: Dates (ngày tháng), Distributed Computing (tính toán phân bố), Linear Algebra (đại số tuyến tính), Profiling (đo hiệu năng), Random Numbers (số ngẫu nhiên), ... Các hàm, kiểu dữ liệu và macros đã định nghĩa trong thư viện chuẩn thì phải được nhập trước khi sử dụng:

* +import _Module_+ imports the module, and +_Module.fn_(x)+ calls the function +_fn_+
(((import)))((("keyword", "import", see="import")))
* +using _Module_+ imports all exported +_Module_+ functions, types and macros.
(((using)))

Có thể bổ sung các tính năng phụ thêm từ tập hợp những gói phần mềm đang không ngừng gia tăng (https://juliaobserver.com).

Chương này không nhằm thay thế tài liệu chính thức của Julia. Tôi chỉ đưa ra vài ví dụ để minh họa những gì là có thể, song không cách nào trình bày hết. Các hàm đã được đề cập trước đây thì sẽ không được nhắc tới nữa. Bạn có thể tìm thấy giới thiệu tổng quan hoàn chỉnh ở https://docs.julialang.org.

=== Đo đạc hiệu năng

Ta đã thấy rằng có những thuật toán thể hiện tốt hơn các thuật toán khác. +fibonnaci+ trong <<memos>> thì nhanh hơn nhiều so với +fib+ trong <<one_more_example>>. Macro +@time+ cho phép ta đo lường sự khác biệt này:
(((@time)))((("macro", "Base", "@time", see="@time")))

[source,jlcon]
----
julia> fib(1)
1
julia> fibonacci(1)
1
julia> @time fib(40)
  0.567546 seconds (5 allocations: 176 bytes)
102334155
julia> @time fibonacci(40)
  0.000012 seconds (8 allocations: 1.547 KiB)
102334155
----

+@time+ in ra thời gian để hàm thực thi, lượng bộ nhớ cần huy động và số lần huy động trước khi trả lại kết quả. Phiên bản mã có dùng ghi nhớ thực ra là nhanh hơn nhiều nhưng cần nhiều bộ nhớ hơn.

[quote]
____
Không có ai cho không bạn thứ gì cả!
____

[TIP]
====
Trong Julia, một hàm sẽ được biên dịch lần đầu trước khi thực thi. Vì vậy, để so sánh hai thuật toán, chúng cần được viết thành các hàm để được biên dịch và lần đầu tiên gọi đến chúng sẽ không được tính khi ta đo hiệu năng, vì nếu không ta sẽ đo cả thời gian biên dịch nữa.

Gói +BenchmarkTools+ (https://github.com/JuliaCI/BenchmarkTools.jl) cung cấp macro +@btime+ giúp ta đối chuẩn (benchmark) đúng cách. Hãy dùng nó!
====


[[collections_and_data_structures]]
=== Các tập hợp và cấu trúc dữ liệu

Ở <<dictionary_subtraction>> ta đã dùng từ điển để tìm ra những từ xuất hiện trong văn bản nhưng không có trong một mảng các từ riêng. Ta đã viết hàm nhận vào +d1+, vốn lấy các từ trong văm bản làm khóa, và +d2+, vốn chứa mảng các từ. Hàm này trả lại một từ điển mà các khóa của nó lấy từ +d1+ nhưng không có trong +d2+.
(((subtract)))

[source,@julia-setup]
----
function subtract(d1, d2)
    res = Dict()
    for key in keys(d1)
        if key ∉ keys(d2)
            res[key] = nothing
        end
    end
    res
end
----

Trong tất cả những từ điển này, các giá trị đều là +nothing+ vì ta không bao giờ dùng đến chúng. Hệ quả là, ta đã lãng phí chút dung lượng lưu trữ.

Julia cung cấp một kiểu dữ liệu dựng sẵn khác: tập hợp, nó hoạt động như một nhóm các khóa của từ điển mà không có giá trị. Việc thêm các phần tử vào một tập hợp thì rất nhanh; và kiểm tra xem phần tử có thuộc tập hợp không. Và tập hợp còn cung cấp các hàm và toán tử để phục vụ phép tính thông dụng nữa.
(((Set)))((("type", "Base", "Set", see="Set")))

Chẳng hạn, phép trừ tập hợp có ngay ở hàm tên là +setdiff+. Vì vậy ta có thể viết lại +subtract+ như sau:
(((setdiff)))((("function", "Base", "setdiff", see="setdiff")))

[source,@julia-setup]
----
function subtract(d1, d2)
    setdiff(d1, d2)
end
----

Kết quả là một tập hợp thay vì một từ điển.

Có những ví dụ trong sách này giải được một cách gọn gàng, hiệu quả hơn nhờ tập hợp. Chẳng hạn, có một lời giải bài +hasduplicates+, từ <<ex10-7>>, mà dùng đên từ điển:
(((hasduplicates)))

[source,@julia-setup]
----
function hasduplicates(t)
    d = Dict()
    for x in t
        if x ∈ d
            return true
        end
        d[x] = nothing
    end
    false
end
----

Khi một phần tử xuất hiện lần đầu tiên, ta thêm nó vào từ điển. Nếu vẫn phần tử đó xuất hiện lần nữa, hàm này trả lại +true+.

Với tập hợp ta có thể viết lại hàm đó như sau:

[source,@julia-setup]
----
function hasduplicates(t)
    length(Set(t)) < length(t)
end
----

Một phần tử chỉ có thể xuất hiện một lần trong tập hợp, bởi vậy nếu phần tử trong +t+ xuất hiện nhiều hơn một lần, tập hợp sẽ nhỏ hơn +t+. Nếu không có gì trùng lặp, tập hợp sẽ có kích thước giống như +t+.

Ta cũng có thể dùng tập hợp để làm một số bài tập trong <<chap09>>. Chẳng hạn, dưới đây là một phiên bản của +usesonly+ có dùng vòng lặp:
(((usesonly)))

[source,@julia-setup]
----
function usesonly(word, available)
    for letter in word
        if letter ∉ available
            return false
        end
    end
    true
end
----

+usesonly+ kiểm tra xem liệu tất cả chữ cái trong +word+ có trong +available+ không. Ta có thể viết lại như sau:

[source,@julia-setup]
----
function usesonly(word, available)
    Set(word) ⊆ Set(available)
end
----

Toán tử +⊆+ (*+\subseteq TAB+*) kiểm tra xem liệu một tập hợp này có phải là tập con của tập hợp khác không, bao gồm cả khả năng hai tập hợp bằng nhau. Kết quả sẽ là true nếu tất cả các chữ trong +word+ có xuất hiện trong +available+. 
(((⊆)))((("operator", "Base", "⊆", see="⊆")))

===== Bài tập 20-1

Hãy viết lại +avoids+ dùng đến tập hợp.
(((avoids)))


=== Toán học

Julia cũng hỗ trợ các số phức. Hằng số toàn cục +im+ được gắn với số phức latexmath:[$\mathrm{i}$], biểu diễn cho căn bậc hai chính của latexmath:[$-1$].
(((complex numbers)))(((im)))

Bây giờ ta có thể kiểm tra đẳng thức Euler,
(((Euler's identity)))

[source,@julia-repl-test]
----
julia> ℯ^(im*π)+1
0.0 + 1.2246467991473532e-16im
----

Dấu +ℯ+ (*+\euler TAB+*) là cơ số của logarit tự nhiên.
(((ℯ))) 

Ta hãy minh họa bản chất số phức của các hàm lượng giác:

[latexmath]
++++
\begin{equation}
{\cos\left(x\right)=\frac{\mathrm{e}^{\mathrm{i}x}+\mathrm{e}^{-\mathrm{i}x}}{2}\,.}
\end{equation}
++++

Ta có thể kiểm tra công thức này cho các giá trị khác nhau của latexmath:[\(x\)].

[source,@julia-repl-test]
----
julia> x = 0:0.1:2π
0.0:0.1:6.2
julia> cos.(x) == 0.5*(ℯ.^(im*x)+ℯ.^(-im*x))
true
----

Trên đây cũng cho thấy một ví dụ khác về toán tử chấm. Julia còn cho phép các số nguyên văn được đặt cạnh những tên hiệu (biến, hằng), với vai trò làm hệ số như trường hợp +2π+.

=== Chuỗi

Ở <<chap08>> và <<chap09>>, ta đã tìm kiếm một cách đơn giản trong các đối tượng chuỗi. Tuy nhiên, Julia có thể xử lý các biểu thức thường quy (_regexes_) tương thích với Perl, điều này giúp việc tìm kiếm các dạng mẫu phức tạp trong các đối tượng chuỗi một cách dễ dàng.
(((regex)))

Hàm +usesonly+ cũng có thể viết được bằng một regex:
(((usesonly)))(((Regex)))((("type", "Base", "Regex", see="Regex")))(((occursin)))((("function", "Base", "occursin", see="occursin")))

[source,@julia-setup chap20]
----
function usesonly(word, available)
  r = Regex("[^$(available)]")
  !occursin(r, word)
end
----

Biểu thức regex tìm một kí tự không có trong chuỗi +available+, còn +occursin+ trả lại +true+ nếu dạng mẫu được tìm thấy trong +word+.

[source,@julia-repl-test chap20]
----
julia> usesonly("banana", "abn")
true
julia> usesonly("bananas", "abn")
false
----

Các biểu thức regex cũng có thể được lập nên từ các nguyên mẫu chuỗi không theo chuẩn với chữ +r+ đứng trước:
(((string)))(((match)))((("function", "Base", "match", see="match")))

[source,@julia-repl-test chap20]
----
julia> match(r"[^abn]", "banana")

julia> m = match(r"[^abn]", "bananas")
RegexMatch("s")
----

Trường hợp này thì không cho phép nội suy chuỗi. Hàm +match+ trả lại nothing nếu dạng mẫu (một câu lệnh) không tìm thấy, trái lại thì sẽ trả lại một đối tượng regexmatch.
(((string interpolation)))(((RegexMatch)))((("type", "Base", "RegexMatch", see="RegexMatch")))

Ta có thể kết xuất thông tin sau từ một đối tượng regexmatch:

* toàn bộ chuỗi con đã khớp được: +m.match+
* các chuỗi con bắt được thu vào một mảng: +m.captures+
* vị trí bắt đầu chỗ khớp: +m.offset+
* các vị trí của các chuỗi con được bắt vào mảng: +m.offsets+

[source,@julia-repl-test chap20]
----
julia> m.match
"s"
julia> m.offset
7
----

Các regex rất mạnh và trang hướng dẫn PERL http://perldoc.perl.org/perlre.html cung cấp mọi chi tiết để bạn lập nên những tìm kiếm đặc biệt.

=== Mảng

Ở <<chap10>> ta đã dùng một đối tượng mảng để làm vật đựng có 1 chiều với một chỉ số để điểm danh các phần tử của nó. Tuy vậy trong Julia, các mảng là những tập hợp (collection) nhiều chiều.

Ta hãy tạo ra một _ma trận_ không kích thước 2×3:
(((zeros)))((("function", "Base", "zeros", see="zeros")))(((matrix)))

[source,@julia-repl-test chap20]
----
julia> z = zeros(Float64, 2, 3)
2×3 Array{Float64,2}:
 0.0  0.0  0.0
 0.0  0.0  0.0
julia> typeof(z)
Array{Float64,2}
----

Kiểu của ma trận này là một mảng 2 chiều chứa các số phẩy động. 
(((dimension)))

Hàm +size+ trả lại một bộ (tuple) với các phần tử là kích thước của mỗi chiều:
(((size)))((("function", "Base", "size", see="size")))

[source,@julia-repl-test chap20]
----
julia> size(z)
(2, 3)
----

Hàm +ones+ lập nên một ma trận với các phần tử với giá trị unit:
(((ones)))((("function", "Base", "ones", see="ones")))

[source,@julia-repl-test chap20]
----
julia> s = ones(String, 1, 3)
1×3 Array{String,2}:
 ""  ""  ""
----

Chuỗi phần tử unit là một chuỗi rỗng.

[WARNING]
====
+s+ không phải là một mảng 1 chiều:

[source,@julia-repl-test chap20]
----
julia> s ==  ["", "", ""]
false
----

+s+ là một ma trận hàng còn +["", "", ""]+ là một ma trận cột.
====

Một ma trận có thể được trực tiếp nhập vào bằng cách dùng dấu cách để tách các phần tử cùng một hàng và dấu chấm phẩy +;+ để tách các cột:
(((;)))

[source,@julia-repl-test chap20]
----
julia> a = [1 2 3; 4 5 6]
2×3 Array{Int64,2}:
 1  2  3
 4  5  6
----

Bạn có thể dùng các ngoặc vuông để chỉ tới các phần tử riêng biệt:
(((square brackets)))

[source,@julia-repl-test chap20]
----
julia> z[1,2] = 1
1
julia> z[2,3] = 1
1
julia> z
2×3 Array{Float64,2}:
 0.0  1.0  0.0
 0.0  0.0  1.0
----

Ta có thể dùng những lát cắt trên mỗi chiều để lựa chọn một nhóm con gồm các phần tử:
(((slice)))

[source,@julia-repl-test chap20]
----
julia> u = z[:,2:end]
2×2 Array{Float64,2}:
 1.0  0.0
 0.0  1.0
----

Toán tử +.+ phát tán giá trị ra tất cả các chiều trong mảng:
(((.)))

[source,@julia-repl-test chap20]
----
julia> ℯ.^(im*u)
2×2 Array{Complex{Float64},2}:
 0.540302+0.841471im       1.0+0.0im
      1.0+0.0im       0.540302+0.841471im
----

=== Giao diện

Julia chỉ định vài giao diện không chính thống để định nghĩa các động thái, nghĩa là các phương thức có mục tiêu cụ thể. Khi bạn mở rộng một phương thức cho một kiểu dữ liệu thì ta có thể dùng các đối tượng thuộc kiểu đó để thiết lập dựa trên những động thái đã nêu.
(((interface)))

[quote]
____
Nếu nó trông như vịt, bơi như con vịt và kêu quàng quạc như con vịt thì có lẽ nó _là_ vịt rồi.
____

Ở <<one_more_example>> ta đã viết hàm +fib+ trả lại phần thử thứ latexmath:[\(n\)] thuộc dãy Fibonnaci.

Phép lặp qua các giá trị của một tập collection là một giao diện như vậy. Ta hãy làm một bộ lặp để trả lại dãy Fibonacci theo cách lười biếng:
(((iterator)))(((Fibonacci)))((("type", "programmer-defined", "Fibonacci", see="Fibonacci")))(((iterate)))((("function", "Base", "iterate", see="iterate")))

[source,@julia-setup chap20]
----
struct Fibonacci{T<:Real} end
Fibonacci(d::DataType) = d<:Real ? Fibonacci{d}() : error("No Real type!")

Base.iterate(::Fibonacci{T}) where {T<:Real} = (zero(T), (one(T), one(T)))
Base.iterate(::Fibonacci{T}, state::Tuple{T, T}) where {T<:Real} = (state[1], (state[2], state[1] + state[2]))
----

Ta đã viết một kiểu tham số mà không có trường +Fibonacci+, một constructor bên ngoài và hai phương thức +iterate+. Phương thức thứ nhất được gọi để khởi tạo bộ lặp và trả lại một cặp (tuple) chứa giá trị thứ nhất bằng 0, cùng một trạng thái. Trạng thái này là một cặp chứ các giá trị thứ hai và thứ ba, là 1 à 1.

Phương thức thứ hai được gọi để lấy giá trị tiếp theo của dãy Fibonacci và trả lại một cặp có phần tử thứ nhất là giá trị tiếp theo và phần tử thứ hai là trạng thái vốn là một cặp có hai giá trị tiếp theo.

Giờ thì ta có thể sử dụng +Fibonacci+ trong một vòng lặp +for+:
(((for statement)))

[source,@julia-repl-test chap20]
----
julia> for e in Fibonacci(Int64)
           e > 100 && break
           print(e, " ")
       end
0 1 1 2 3 5 8 13 21 34 55 89
----

Dường như phép màu đã xảy ra song lời giải thích rất đơn giản. Một vòng lặp +for+ trong Julia

[source,julia]
----
for i in iter
    # body
end
----

được chuyển sang thành:

[source,julia]
----
next = iterate(iter)
while next !== nothing
    (i, state) = next
    # body
    next = iterate(iter, state)
end
----

Đây là một ví dụ rõ ràng cho thấy bằng cách nào mà một giao diện định nghĩa rõ ràng cho phép viết mã dùng được mọi hàm biết đến giao diện này.


=== Các tiện ích tương tác

Ta đã gặp module +InteractiveUtils+ ở <<interactive>>. Macro +@which+ chỉ là phần nổi của tảng băng mà thôi.
(((InteractiveUtils)))(((@which)))

Mã lệnh Julia được thư viện LLVM chuyển đổi qua nhiều bước thành ngôn ngữ máy. Ta có thể trực tiếp trực quan hóa kết quả đầu ra từng bước.

Hãy lấy một ví dụ đơn giản:
(((squaresum)))((("function", "programmer-defined", "squaresum", see="squaresum")))

[source,@julia-setup chap20]
----
function squaresum(a::Float64, b::Float64)
    a^2 + b^2
end
----

Bước đầu tiên là nhìn vào mã lệnh được hạ xuống:
(((@code_lowered)))((("macro", "InteractiveUtils", "@code_lowered", see="@code_lowered")))

[source,@julia-repl-test chap20]
----
julia> using InteractiveUtils

julia> @code_lowered squaresum(3.0, 4.0)
CodeInfo(
1 ─ %1 = Core.apply_type(Base.Val, 2)
│   %2 = (%1)()
│   %3 = Base.literal_pow(:^, a, %2)
│   %4 = Core.apply_type(Base.Val, 2)
│   %5 = (%4)()
│   %6 = Base.literal_pow(:^, b, %5)
│   %7 = %3 + %6
└──      return %7
)
----

Macro +@code_lowered+ trả lại một mảng _biểu diễn trung gian_ của mã lệnh được trình biên dịch dùng đến để phát sinh mã lệnh tối ưu hóa.
(((biểu diễn trung gian)))

Bước tiếp theo thêm vào thông tin:
(((@code_typed)))((("macro", "InteractiveUtils", "@code_typed", see="@code_typed")))

[source,@julia-repl-test chap20]
----
julia> @code_typed squaresum(3.0, 4.0)
CodeInfo(
1 ─ %1 = Base.mul_float(a, a)::Float64
│   %2 = Base.mul_float(b, b)::Float64
│   %3 = Base.add_float(%1, %2)::Float64
└──      return %3
) => Float64
----

Ta thấy rằng kiểu dữ liệu của các kết quả trung gian và giá trị trả lại được suy luận đúng.

Dạng biểu diễn của mã lệnh này được chuyển sang mã LLVM:
(((LLVM code)))(((@code_llvm)))((("macro", "InteractiveUtils", "@code_llvm", see="@code_llvm")))

[source,@julia-repl chap20]
----
@code_llvm squaresum(3.0, 4.0)
----

Và sau cùng _mã máy_ được phát sinh:
(((machine code)))(((@code_native)))((("macro", "InteractiveUtils", "@code_native", see="@code_native")))

[source,@julia-repl-test chap20]
----
julia> @code_native squaresum(3.0, 4.0)
	.section	__TEXT,__text,regular,pure_instructions
; ┌ @ none:2 within `squaresum'
; │┌ @ intfuncs.jl:261 within `literal_pow'
; ││┌ @ none:2 within `*'
	vmulsd	%xmm0, %xmm0, %xmm0
	vmulsd	%xmm1, %xmm1, %xmm1
; │└└
; │┌ @ float.jl:401 within `+'
	vaddsd	%xmm1, %xmm0, %xmm0
; │└
	retq
	nopl	(%rax)
; └
----

=== Gỡ lỗi

Các macro +Logging+ cho ta một cách khác thay vì viết các lệnh print để rào đỡ mã lệnh:
(((@warn)))((("macro", "Base", "@warn", see="@warn")))(((debugging)))

[source,jlcon]
----
julia> @warn "Abandon printf debugging, all ye who enter here!"
┌ Warning: Abandon printf debugging, all ye who enter here!
└ @ Main REPL[1]:1
----

Không cần phải xóa các câu lệnh gỡ lỗi khỏi mã nguồn. Chẳng hạn, trái với macro +@warn+ ở trên
(((debug statement)))(((@debug)))((("macro", "Base", "@debug", see="@debug")))

[source,jlcon]
----
julia> @debug "The sum of some values $(sum(rand(100)))"

----

mặc định sẽ không tạo ra kết quả nào. Trong trường hợp này +sum(rand(100))+ sẽ không bao giờ được lượng giá trừ phi ta bật chế độ _debug logging_.
(((debug logging)))

Ta có thể chọn mức độ ghi biên bản qua một biến môi trường +JULIA_DEBUG+:
(((biến môi trường)))

[source]
----
$ JULIA_DEBUG=all julia -e '@debug "Tổng của một số giá trị $(sum(rand(100)))"'
┌ Debug: Tổng của một số giá trị 47.116520814555024
└ @ Main none:1
----

Ở đây, ta đã dùng +all+ để thu mọi thông tin gỡ lỗi, song bạn cũng có thể chọn để phát sinh ra kết quả đầu ra cho một file hoặc module cụ thể thôi.


=== Thuật ngữ

regex::
Biểu thức thường quy, một dãy các kí tự để định nghĩa cho dạng mẫu tìm kiếm.
(((regex)))

ma trận::
(matrix) Một mảng 2 chiều.
(((ma trận)))

biểu diễn trung gian::
(intermediate representation) Cấu trúc dữ liệu được dùng bên trong một trình biên dịch để biểu diễn cho mã lệnh.
(((biểu diễn trung gian)))

mã máy::
(machine code) Các chỉ dẫn ngôn ngữ có thể thực thi trực tiếp bởi bộ xử lý trung tâm của máy tính.
(((mã máy)))

ghi biên bản gỡ lỗi::
(debug logging) Việc lưu lại các thông điệp gỡ lỗi vào một biên bản.
(((debug logging)))
