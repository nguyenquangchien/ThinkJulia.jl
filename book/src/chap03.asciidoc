[[chap03]]
== Hàm

Trong lập trình, một _hàm_ là một nhóm được đặt tên gồm các câu lệnh nhằm thực hiện một nhiệm vụ tính toán cụ thể. Khi định nghĩa hàm, bạn chỉ định tên của nó và tiếp theo là loạt các câu lệnh. Sau này, bạn có thể “gọi” hàm theo tên của nó.
(((hàm)))

=== Lời gọi hàm

Ta đã thấy một ví dụ của việc gọi hàm:
(((lời gọi hàm)))

[source,@julia-repl-test]
----
julia> println("Hello, World!")
Hello, World!
----

Tên của hàm này là +println+. Biểu thức ở trong cặp ngoặc tròn được gọi là _đối số_ của hàm.
(((đối số)))(((ngoặc tròn)))

Người ta thường nói một hàm “lấy” một đối số và “trả về” một giá trị. Giá trị này được gọi là _giá trị trả về_.
(((giá trị trả về)))

Julia cung cấp các hàm giúp chuyển đổi một giá trị từ kiểu này sang kiểu khác. Hàm +parse+ nhận vào một chuỗi và chuyển nó thành một số kiểu bất kì nếu có thể, còn nếu không được thì thông báo lỗi:
(((chuyển đổi kiểu)))((("hàm", "Base", "parse", see="parse")))(((ArgumentError)))((("lỗi", "Core", "ArgumentError", see="ArgumentError")))

[source,@julia-repl-test]
----
julia> parse(Int64, "32")
32
julia> parse(Float64, "3.14159")
3.14159
julia> parse(Int64, "Hello")
ERROR: ArgumentError: invalid base 10 digit 'H' in "Hello"
----

+trunc+ có thể chuyển các giá trị phẩy động sang số nguyên, nhưng nó không làm tròn mà chỉ cắt bỏ phần thập phân:
(((trunc)))((("hàm", "Base", "trunc", see="trunc")))

[source,@julia-repl-test]
----
julia> trunc(Int64, 3.99999)
3
julia> trunc(Int64, -2.3)
-2
----

+float+  chuyển số nguyên và chuỗi sang số phẩy động:
(((float)))((("hàm", "Base", "float", see="float")))

[source,@julia-repl-test]
----
julia> float(32)
32.0
----

Cuối cùng, +string+ chuyển đối số của nó sang một chuỗi:
(((string)))((("hàm", "Base", "string", see="string")))

[source,@julia-repl-test]
----
julia> string(32)
"32"
julia> string(3.14159)
"3.14159"
----


=== Các hàm toán học

Trong Julia, phần lớn các hàm toán học thông dụng đều đã sẵn có:
(((hàm toán học)))(((log10)))((("hàm", "Base", "log10", see="log10")))

[source,julia]
----
ratio = signal_power / noise_power
decibels = 10 * log10(ratio)
----

Ví dụ thứ nhất sử dụng +log10+ để tính tỉ lệ giữa tín hiệu và nhiễu theo decibel (với giả sử rằng +signal_power+ và +noise_power+ đều đã định nghĩa). +log+, để tính lô-ga tự nhiên, cũng sẵn có.
(((log)))((("hàm", "Base", "log", see="log")))((("logarithmic function", see="log")))

[source,julia]
----
radians = 0.7
height = sin(radians)
----

Ví dụ thứ hai tìm sin của +radians+. Ở đây tên của biến số gợi ý rằng +sin+ và các hàm lượng giác khác (+cos+, +tan+, etc.) nhận đối số có đơn vị radian. Để đổi từ độ sang radian, hãy chai cho 180 và nhân với latexmath:[\(\pi\)]:
(((sin)))((("hàm", "Base", "sin", see="sin")))(((hàm lượng giác)))

[source,@julia-repl-test]
----
julia> degrees = 45
45
julia> radians = degrees / 180 * π
0.7853981633974483
julia> sin(radians)
0.7071067811865475
----

 Giá trị của biến +π+ là một số phẩy động xấp xỉ với số latexmath:[\(\pi\)], với độ chính xác khoảng 16 chữ số.
(((pi)))

Nếu bạn nắm vững lượng giác, bạn có thể kiểm tra lại kết quả trước bằng cách so sánh nó với căn bậc hai của hai chia đôi:
(((sqrt)))((("hàm", "Base", "sqrt", see="sqrt")))((("hàm căn bậc hai", see="sqrt")))

[source,@julia-repl-test]
----
julia> sqrt(2) / 2
0.7071067811865476
----


=== Ghép hàm

Cho đến giờ, chúng ta mới xét đến các thành phần tạo nên chương trình —biến, biểu thức, và câu lệnh—một cách riêng lẻ, mà chưa nói đến việc kết hợp chúng như thế nào.
(((ghép)))

Một trong những đặc điểm hữu ích của các ngôn ngữ lập trình là chúng cho lấy những thành phần nhỏ và ghép chúng lại. Chẳng hạn, đối số của một hàm có thể là bất cứ biểu thức nào, bao gồm cả các toán tử đại số:

[source,julia]
----
x = sin(degrees / 360 * 2 * π)
----

Và thậm chí cả các lời gọi hàm nữa:
(((exp)))((("hàm", "Base", "exp", see="exp")))((("hàm mũ", see="exp")))

[source,julia]
----
x = exp(log(x+1))
----

Hầu như bất kì chỗ nào bạn đặt được một giá trị, bạn cũng sẽ thay được vào đó một biểu thức, chỉ với một ngoại lệ: phía bên trái của một câu lệnh gán phải là một tên biến. Tất cả biểu thức nếu đặt ở bên phía trái đó sẽ phạm lỗi cú pháp (sau này ta sẽ thấy trường hợp ngoại lệ).
(((lỗi cú pháp)))

[source,@julia-eval chap03]
----
hours = 2;
----

[source,@julia-repl-test chap03]
----
julia> minutes = hours * 60 # đúng
120
julia> hours * 60 = minutes # sai!
ERROR: syntax: "60" is not a valid function argument name
----

=== Thêm các hàm mới

Đến bây giờ, chúng ta mới chỉ dùng những hàm có sẵn trong Julia, song thật ra có thể tạo ra những hàm mới. Một lời _định nghĩa hàm_ bao gồm việc chỉ định tên của hàm mới và danh sách các câu lệnh cần được thực hiện khi hàm được gọi. Sau đây là một ví dụ:
(((hàm)))(((định nghĩa hàm)))(((hàm người dùng định nghĩa)))(((printlyrics)))((("hàm", "người dùng định nghĩa", "printlyrics", see="printlyrics")))

[source,@julia-setup chap03]
----
function printlyrics()
    println("I'm a lumberjack, and I'm okay.")
    println("I sleep all night and I work all day.")
end
----

+function+ là một từ khoá để khẳng định rằng đây là một định nghĩa làm. Tên của hàm là +printlyrics+. Quy tắc đặt tên hàm cũng như đặt tên biến: có thể gồm hầu hết các kí tự Unicode (xem <<characters>>), nhưng kí tự đầu tiên không thể là số. Bạn không thể đặt tên hàm giống như một từ khoá, và cũng nên tránh đặt tên hàm và tên biến trùng nhau.
((("từ khóa", "hàm", see="hàm")))(((đối số)))(((kí tự Unicode)))

Cặp ngoặc tròn bên trong không có gì, điều đó có nghĩa là hàm này không nhận đối số nào.
(((ngoặc tròn, trống)))

Dòng đầu tiên của định nghĩa hàm được gọi là _đoạn đầu_; phần còn lại là _phần thân_. Phần thân phải được kết thúc bởi +end+ và nó có thể chứa bao nhiêu câu lệnh cũng được. Để dễ đọc, phần thân của hàm cần viết thụt đầu dòng.
(((đoạn đầu)))(((phần thân)))(((end)))((("từ khoá", "end", see="end")))(((thụt đầu dòng)))

Các dấu nháy phải là "nháy thẳng", phím gõ dấu này thường ở cạnh phím Enter. “Các dấu nháy cong”, như dùng trong câu này, không hợ lệ trong Julia.
(((dấu nháy)))

Nếu bạn gõ định nghĩa hàm vào ở chế độ tương tác, REPL sẽ in thụt đầu dòng nhằm cho bạn biết rằng việc định nghĩa hàm chưa hoàn thành:

[source,jlcon]
----
julia> function printlyrics()
       println("I'm a lumberjack, and I'm okay.")

----

Để kết thúc hàm, bạn phải gõ vào +end+.

Cú pháp của lời gọi hàm mới cũng giống như với các hàm dựng sẵn:

[source,@julia-repl-test chap03]
----
julia> printlyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
----

Một khi bạn đã định nghĩa hàm, bạn có thể dùng nó trong một hàm khác. Chẳng hạn, để lặp lại điệp khúc vừa rồi, ta có thể viết một hàm có tên là +repeatlyrics+:
(((repeatlyrics)))((("hàm", "người dùng định nghĩa", "repeatlyrics", see="repeatlyrics")))

[source,@julia-setup chap03]
----
function repeatlyrics()
    printlyrics()
    printlyrics()
end
----

Và sau đó gọi +repeatlyrics+:

[source,@julia-repl-test chap03]
----
julia> repeatlyrics()
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
I'm a lumberjack, and I'm okay.
I sleep all night and I work all day.
----

Song đó không phải là cách viết một bài hát theo đúng nghĩa.


=== Định nghĩa và sử dụng

Lấy lại những đoạn câu lệnh từ mục trước, ta được toàn bộ chương trình sau:

[source,julia]
----
function printlyrics()
    println("I'm a lumberjack, and I'm okay.")
    println("I sleep all night and I work all day.")
end

function repeatlyrics()
    printlyrics()
    printlyrics()
end

repeatlyrics()
----

Chương trình này bao gồm hai định nghĩa hàm: +printlyrics+ và +repeatlyrics+. Các định nghĩa hàm được thực hiện cũng giống như với các câu lệnh khác, nhưng tác dụng của chúng là tạo ra những đối tượng hàm. Các câu lệnh bên trong hàm không được thực hiện cho đến tận khi hàm được gọi, hơn nữa định nghĩa hàm cũng không tạo ra kết quả.

Bạn có thể nghĩ rằng cần phải tạo ra một hàm trước khi có thể thực hiện nó, và quả đúng như vậy. Nói cách khác, định nghĩa hàm phải được thực hiện trước lần gọi hàm đầu tiên.

===== Bài tập 3-1

Chuyển dòng lệnh cuối cùng của chương trình vừa rồi lên trên cùng, để cho lời gọi hàm xuất hiện trước định nghĩa hàm. Chạy chương trình để xem bạn nhận được thông báo lỗi gì.

Giờ thì chuyển lời gọi hàm trở lại cuối cùng và chuyển định nghĩa hàm +printlyrics+ xuống dưới định nghĩa hàm +repeatlyrics+. Lần này khi chạy chương trình, điều gì sẽ xảy ra?


=== Luồng thực thi chương trình

Để đảm bảo chắc chắn rằng một hàm đã được định nghĩa trước lần sử dụng đầu tiên, bạn phải biết thứ tự thực hiện các câu lệnh, còn gọi là _luồng thực thi_.
(((luồng thực thi)))

Việc thực thi luôn được bắt đầu với câu lệnh thứ nhất của chương trình. Các câu lệnh được thực hiện lần lượt từ trên xuống.

Các định nghĩa hàm không làm thay đổi luồng thực thi chương trình, nhưng cần nhớ rằng các câu lệnh bên trong của hàm không được thực hiện cho đến tận lúc hàm được gọi.

Mỗi lần gọi hàm là một lần rẽ ngoặt luồng thực thi. Thay vì chuyển sang câu lệnh kế tiếp, luồng sẽ nhảy tới phần thân của hàm, thực hiện tất cả những câu lệnh ở trong đó, rồi trở lại tiếp tục thực hiện từ điểm mà nó vừa rời đi.

Điều này nghe có vẻ đơn giản, nhưng sẽ khác đi nếu bạn nhận thấy rằng một hàm có thể gọi hàm khác. Khi ở trong phần thân của một hàm, chương trình có thể phải thực hiện những câu lệnh ở trong phần thân của một hàm khác. Nhưng khi đang thực hiện hàm mới đó, chương trình còn phải thực hiện một hàm khác nữa!

May mắn là Juia rất giỏi theo dõi vị trí thực thi của chương trình, vì vậy mỗi khi một hàm được thực thi xong, chương trình sẽ trở về chỗ mà nó đã rời đi từ hàm gọi ban đầu. Khi trở về cuối chương trình, việc thực thi kết thúc.

Tóm lại, khi đọc một chương trình, bạn không nhất thiết phải đọc từ trên xuống dưới. Đôi khi việc dò theo luồng thực thi của chương trình sẽ có lý hơn.


=== Tham số và đối số

Một số các hàm dựng sẵn mà ta đã gặp có yêu cầu đối số. Chẳng hạn, khi gọi hàm +sin+ bạn cần nhập vào một đối số. Một số hàm còn lấy nhiều đối số: +parse+ lấy hai đối số là một kiểu số và một chuỗi.
(((tham số)))(((đối số)))(((parse)))(((sin)))

Bên trong hàm, các đối số được gán cho các biến được gọi là _tham số_. Sau đây là lời định nghĩa một hàm nhận vào một đối số:
(((printtwice)))((("hàm", "người dùng định nghĩa", "printtwice", see="printtwice")))

[source,@julia-setup chap03]
----
function printtwice(bruce)
    println(bruce)
    println(bruce)
end
----

Hàm này gán một đối số cho một tham số có tên là +bruce+. Khi hàm được gọi, nó in ra giá trị của tham số hai lần (bất kể tham số là gì).

Hàm này hoạt động được với bất kì giá trị nào có thể in được.

[source,@julia-repl-test chap03]
----
julia> printtwice("Spam")
Spam
Spam
julia> printtwice(42)
42
42
julia> printtwice(π)
π
π
----

Quy tắc áp dụng cho các hàm dựng sẵn cũng có thể áp dụng được cho các hàm người dùng tạo ra, vì vậy ta có thể dùng bất kì loại biểu thức nào làm đối số cho +printtwice+:
(((ghép)))(((hàm người dùng định nghĩa)))

[source,@julia-repl-test chap03]
----
julia> printtwice("Spam "^4)
Spam Spam Spam Spam
Spam Spam Spam Spam
julia> printtwice(cos(π))
-1.0
-1.0
----

Đối số được ước lượng trước khi hàm số được gọi, vì vậy trong các ví dụ, các biểu thức +"Spam "^4+ và +cos(π)+ đều chỉ được ước lượng một lần.

(((đối số)))(((cos)))((("hàm", "Base", "cos", see="cos")))

Bạn cũng có thể dùng một biến cho một đối số:

[source,@julia-repl-test chap03]
----
julia> michael = "Eric, the half a bee."
"Eric, the half a bee."
julia> printtwice(michael)
Eric, the half a bee.
Eric, the half a bee.
----

Tên của biến được đưa vào như đối số (+michael+) thì không có liên quan gì đến tân của tham số (+bruce+). Giá trị nào được gọi về (ở đoạn chương trình gọi) cũng không quan trọng; ở đây trong +printtwice+, chúng ta đều gọi mọi người với tên +bruce+.


=== Các biến và tham số đều có tính địa phương

Khi tạo ra một biến ở trong hàm, nó mang tính _địa phương_, theo nghĩa rằng nó chỉ tồn tại bên trong hàm số. Chẳng hạn:
(((biến địa phương)))(((biến, địa phương)))(((cattwice)))((("hàm", "người dùng định nghĩa", "cattwice", see="cattwice")))

[source,@julia-setup chap03]
----
function cattwice(part1, part2)
    concat = part1 * part2
    printtwice(concat)
end
----

Hàm này nhận hai đối số, nối chúng lại, và sau đó in ra kết quả hai lần. Sau đây là một ví dụ sử dụng hàm:
(((nối)))(((lặp lại)))

[source,@julia-repl-test chap03]
----
julia> line1 = "Bing tiddle "
"Bing tiddle "
julia> line2 = "tiddle bang."
"tiddle bang."
julia> cattwice(line1, line2)
Bing tiddle tiddle bang.
Bing tiddle tiddle bang.
----

Khi  +cattwice+ kết thúc, biến +concat+ bị huỷ bỏ. Nếu cố gắng in nó, ta sẽ nhận được một biệt lệ:
(((lỗi thực thi)))(((UndefVarError)))((("lỗi", "Core", "UndefVarError", see="UndefVarError")))

[source,@julia-repl-test chap03]
----
julia> println(concat)
ERROR: UndefVarError: concat not defined
----

Các tham số cũng có tính địa phương. Chẳng hạn, bên ngoài +printtwice+, không có thứ gì được gọi là +bruce+ cả.
(((tham số)))


[[biểu đồ ngăn xếp]]
=== Biểu đồ ngăn xếp

Để theo dõi xem những biến nào được sử dụng ở đâu, đôi khi sẽ tiện lợi nếu ta vẽ một _biểu đồ ngăn xếp_. Cũng như biểu đồ trạng thái, biểu đồ ngăn xếp cho thấy giá trị của từng biến, đồng thời cho thấy hàm mà mỗi biến thuộc về.
(((biểu đồ ngăn xếp)))((("biểu đồ", "ngăn xếp", see="biểu đồ ngăn xếp")))

Mỗi hàm đều được biểu diễn bởi một _khung_. Khung là một hình chữ nhật, có tên của hàm số ghi bên cạnh, cùng với các tham số và biến số của hàm được ghi trong đó. Biểu đồ ngăn xếp cho ví dụ trước được cho thấy trên <<fig03-1>>.
(((khung)))

[[fig03-1]]
.Biểu đồ ngăn xếp
image::images/fig31.svg[]

Các khung được bố trí trong một ngăn xếp cùng với chỉ định hàm nào gọi những hàm nào, và cứ như vậy. Ở ví dụ này, +printtwice+ được gọi bởi +cattwice+, và +cattwice+ được gọi bởi +Main+, vốn là một tên đặc biệt dành cho khung cấp cao nhất. Khi bạn tạo ra một biến không nằm trong bất cứ hàm nào, thì nó sẽ nằm trong +Main+.

Mỗi tham số tham chiếu đến giá trị tương ứng với đối số của nó. Do vậy, +part1+ có cùng giá trị với +line1+, +part2+ có cùng giá trị với +line2+, và +bruce+ có cùng giá trị với +concat+.

Nếu có một lỗi xảy ra trong quá trình gọi hàm, Julia sẽ in ra tên của hàm, cùng với tên của hàm số gọi hàm trước đó, và cứ như vậy cho đến khi trở về +Main+.
(((Main)))

Chẳng hạn, nếu bạn cố gắng truy cập +concat+ từ bên trong +printtwice+, bạn sẽ nhận được một thông báo lỗi +UndefVarError+:
(((UndefVarError)))

----
ERROR: UndefVarError: concat not defined
Stacktrace:
 [1] printtwice at ./REPL[1]:2 [inlined]
 [2] cattwice(::String, ::String) at ./REPL[2]:3
----

Danh sách các hàm như vậy có tên là _dò ngược_. Nó cho bạn biết file chương trình nào có chứa lỗi, và dòng lệnh nào cũng như những hàm nào được thực hiện lúc bấy giờ. Nó cũng cho biết dòng lệnh gây ra lỗi.
(((dò ngược)))

Thứ tự của các hàm trong dò ngược cũng giống như thứ tự của các khung trong sơ đồ ngăn xếp. Hàm số đang được chạy có vị trí dưới cùng.


=== Các hàm có và không trả lại kết quả

Một số hàm mà chúng ta dùng, như các hàm toán học, đều cho ra kết quả; ta gọi nôm na là _hàm kết quả_. Các hàm khác, như +printtwice+, thực hiện một hành động, nhưng không trả lại kết quả nào. Chúng được gọi là _hàm không kết quả_.
(((hàm kết quả)))(((hàm không kết quả)))

Khi bạn gọi hàm kết quả, thường thì bạn muốn thực hiện thao tác với kết quả thu được; chẳng hạn, bạn muốn gán nó cho một biến hoặc dùng nó như một phần của biểu thức:

[source,julia]
----
x = cos(radians)
golden = (sqrt(5) + 1) / 2
----

Khi bạn gọi một hàm từ chế độ tương tác, Julia hiển thị kết quả:
(((chế độ tương tác)))

[source,@julia-repl-test]
----
julia> sqrt(5)
2.23606797749979
----

Nhưng trong một văn lệnh, nếu bạn gọi một hàm kết quả, thì giá trị kết quả này sẽ vĩnh viễn mất đi!
(((chế độ văn lệnh)))

[source,@julia-run]
----
sqrt(5)
----

Văn lệnh này tính giá trị căn bậc hai của 5, nhưng vì nó không ghi lại và cũng chẳng hiển thị kết quả, nên nó không có tác dụng gì.

Các hàm không kết quả có thể hiển thị thứ gì đó trên màn hình hoặc có những hiệu ứng khác, nhưng chúng không có giá trị được trả về. Nếu bạn cố gắng gán kết quả vào một biến, bạn sẽ được một giá trị đặc biệt gọi là +nothing+.
(((nothing)))

[source,@julia-repl-test chap03]
----
julia> result = printtwice("Bing")
Bing
Bing
julia> show(result)
nothing
----

Để in giá trị +nothing+, bạn phải dùng hàm +show+, hàm này giống như +print+, song có thể đảm nhiệm được giá trị +nothing+.
(((show)))((("hàm", "Base", "show", see="show")))

Giá trị +nothing+ không phải là chuỗi +"nothing"+. Nó là một giá trị đặc biệt và có dạng riêng của mình:
(((Nothing)))((("kiểu", "Base", "Nothing", see="Nothing")))

[source,@julia-repl-test]
----
julia> typeof(nothing)
Nothing
----

Các hàm ta đã viết cho đến giờ đều thuộc loại không kết quả. Ta sẽ bắt đầu viết các hàm kết quả kể từ những chương tiếp sau.



=== Tại sao lại cần có hàm?

Có thể sẽ không rõ rằng tại sao ta phải cất công chia nhỏ chương trình thành các hàm. Có một số lí do cho điều đó:

* Việc tạo ra một hàm mới sẽ giúp bạn có khả năng đặt tên cho một nhóm các câu lệnh, từ đó làm cho chương trình dễ đọc và gỡ lỗi hơn.

* Các hàm có thể thu gọn một chương trình bằng cách loại bỏ những đoạn mã lệnh trùng lặp. Sau này, nếu bạn sửa đổi chương trình, thì chỉ cần thực hiện sửa ở một chỗ.

* Việc chia một chương trình dài thành những hàm cho phép ta gỡ lỗi từng phần một và sau đó kết hợp lại để được một chương trình tổng thể hoạt động được.

* Các hàm được thiết kế tốt sẽ hữu dụng với nhiều chương trình. Một khi bạn viết ra một hàm và gỡ lỗi xong xuôi, bạn có dùng lại nó.

* Trong Julia, các hàm có thể cải thiện hiệu năng chương trình bạn viết.


=== Gỡ lỗi

Một trong những kĩ năng quan trọng nhất mà bạn sẽ học được, đó là gỡ lỗi. Mặc dù đôi khi rất khó chịu, nhưng việc gỡ lỗi rất cần trí tuệ, chứa đầy thử thách và là một phần thú vị trong lập trình.
(((gỡ lỗi)))

Theo một nghĩa nào đó, gỡ lỗi giống như việc điều tra tội phạm. Bạn có trong tay các manh mối, phải suy luận ra các quá trình và sự kiện dẫn đến những hậu quả đang chứng kiến.

Việc gỡ lỗi cũng giống như khoa học thực nghiệm. Mỗi khi có ý kiến về nguyên nhân dẫn đến lỗi sai, bạn sửa chữa chương trình và thực hiện lại. Nếu giả thiết của bạn là đúng thì bạn thu được kết quả của công việc sửa chữa, đồng thời tiến một bước gần hơn tới chương trình đúng. Còn nếu giả thiết là sai thì bạn cần đề ra một giả thiết mới. Sherlock Holmes đã chỉ ra,

[quote, A. Conan Doyle, Dấu của bộ tứ]
____
Khi bạn đã loại trừ tất cả những điều không thể thì những gì còn lại, dù có mập mờ đến đâu, chính là sự thật.
____
(((gỡ lỗi thử nghiệm)))(((Holmes, Sherlock)))(((Doyle, Arthur Conan)))

Đối với một số người, việc lập trình và gỡ lỗi là giống nhau. Đó là vì lập trình chính là quá trình gỡ lỗi dần dần đến khi bạn có được chương trình mong muốn. Ý tưởng ở đây là bạn nên bắt đầu với một chương trình có một tính năng nhỏ nào đó và thực hiện các chỉnh sửa, gỡ lỗi trong suốt quá trình, đến khi bạn có được một chương trình hoàn thiện.

Chẳng hạn, Linux là một hệ điều hành bao gồm hàng nghìn dòng lệnh, nhưng nó chỉ bắt đầu từ một chương trình đơn giản do Linus Torvalds dùng để khám phá chip Intel 80386. Theo Larry Greenfield thì “Một trong những dự án trước đó của Linus là một chương trình có nhiệm vụ chuyển từ việc in AAAA thành BBBB. Sau đó nó dần trở thành Linux”. (_The Linux Users’ Guide_ Beta Version 1/  Hướng dẫn sử dụng Linux, phiên bản Beta 1).
(((Linux)))(((Torvalds, Linus)))


=== Thuật ngữ

hàm::
Chuỗi các câu lệnh được đặt tên; nhằm thực hiện một thao tác có ích nhất định. Các hàm có hoặc không nhận tham số và có thể có hoặc không cho ra kết quả.
(((hàm)))

định nghĩa hàm::
Câu lệnh nhằm tạo ra một hàm, đặt tên cho nó, chỉ định các tham số và các lệnh cần được thực hiện.
(((định nghĩa hàm)))

đối tượng hàm::
Giá trị được tạo ra bởi định nghĩa hàm. Tên của hàm là một biến tham chiếu đến một đối tượng hàm.
(((đối tượng hàm)))

đoạn đầu::
Dòng đầu tiên trong lời định nghĩa hàm.
(((đoạn đầu)))

phần thân::
Dãy các câu lệnh bên trong định nghĩa hàm.
(((phần thân)))

tham số::
Tên được dùng bên trong của hàm để tham chiếu đến giá trị được truyền vào dưới dạng đối số.
(((tham số)))

lời gọi hàm::
Câu lệnh nhằm thực hiện một hàm. Câu lệnh này bao gồm tên hàm, theo sau là danh sách các đối số trong cặp ngoặc tròn.
(((lời gọi hàm)))

đối số::
Giá trị được cung cấp cho hàm khi hàm được gọi. Giá trị này được gán cho tham số tương ứng trong hàm.
(((đối số)))

biến địa phương::
Biến được định nghĩa bên trong hàm. Một biến địa phương chỉ có thể được dùng bên trong hàm đó.
(((biến địa phương)))

giá trị được trả về::
Kết quả của hàm. Nếu một lời gọi hàm được dùng như một biểu thức thì giá trị được trả về chính là giá trị của biểu thức đó.
(((giá trị được trả về)))

hàm kết quả::
Hàm có trả lại kết quả.
(((hàm kết quả)))

hàm không kết quả::
Hàm luôn trả lại +nothing+.
(((hàm không kết quả)))

+nothing+::
Một giá trị đặc biệt được trả lại bởi hàm không kết quả.
(((nothing)))

ghép::
Việc dùng một biểu thức làm bộ phận trong một biểu thức lớn hơn, hoặc một câu lệnh là phần trong câu lệnh lớn hơn.
(((ghép)))

luồng thực thi::
Thứ tự mà theo đó các câu lệnh được chạy.
(((luồng thực thi)))

biểu đồ ngăn xếp::
Cách biểu diễn bằng hình vẽ cho một loạt các hàm chồng xếp lên nhau, trong đó có chỉ ra các biến của chúng và các giá trị mà chúng tham chiếu đến.
(((biểu đồ ngăn xếp)))

khung::
Hình chữ nhật trong biểu đồ ngăn xếp dùng để biểu diễn lời gọi hàm. Nó bao gồm các biến địa phương và các tham số của hàm.
(((khung)))

dò ngược::
Danh sách các hàm đang được thực hiện, được in lên khi có biệt lệ xảy ra.
(((dò ngược)))


=== Bài tập

[TIP]
====
Các bài tập này cần được giải chỉ bằng các câu lệnh và tính năng khác mà ta đã học.
====

[[ex03-1]]
===== Bài tập 3-2

Hãy viết một hàm tên là +rightjustify+ để đọc vào một chuỗi tên là +s+ như một tham số và in ra chuỗi bắt đầu với các kí tự trống; số kí tự trống vừa đủ để cho kí tự cuối cùng của chuỗi nằm tại cột thứ 70 trên màn hình.
(((rightjustify)))((("hàm", "người dùng định nghĩa", "rightjustify", see="rightjustify)))

[source,@julia-eval chap03-ex]
----
using ThinkJulia
----

[source,@julia-repl chap03-ex]
----
rightjustify("monty")
----

[TIP]
====
Hãy dùng phép nối chuỗi và lặp chuỗi. Ngoài ra, Julia còn cung cấp một hàm dựng sẵn có tên +length+ để trả lại chiều dài một chuỗi, theo đó giá trị của +length("monty")+ bằng 5.
(((length)))((("hàm", "Base", "length", see="length)))
====

[[ex03-2]]
===== Bài tập 3-3

Một đối tượng hàm là một giá trị mà bạn có thể gán vào một biến hoặc chuyển dưới dạng một tham số. Chẳng hạn, +dotwice+ là một hàm nhận vào một đối tượng hàm như một tham số và thực hiện hàm tham số này hai lần:
(((đối tượng hàm)))(((dotwice)))((("hàm", "người dùng định nghĩa", "dotwice", see="dotwice")))

[source,julia]
----
function dotwice(f)
    f()
    f()
end
----

Sau đây là một ví dụ có sử dụng +dotwice+ để gọi một hàm tên là +printspam+ hai lần.
(((printspam)))((("hàm", "người dùng định nghĩa", "printspam", see="printspam")))

[source,julia]
----
function printspam()
    println("spam")
end

dotwice(printspam)
----

. Hãy gõ một văn lệnh thực hiện ví dụ này và chạy kiểm tra.

. Sửa đổi +dotwice+ sao cho nó nhận vào hai đối số— một đối tượng hàm và một giá trị—và gọi hàm hai lần, trong đó có chuyển giá trị như một đối số.

. Sao chép lời định nghĩa +printtwice+ từ đoạn trước của chương sách vào trong văn lệnh của bạn.

. Dùng dạng đã chỉnh sửa của +dotwice+ để gọi +printtwice+ hai lần, trong đó truyền +"spam"+ như một tham số.

. Định nghĩa một hàm mới có tên +dofour+ nhận vào một đối tượng hàm và một giá trị, sau đó gọi hàm bốn lần, với giá trị đóng vai trò tham biến. Trong phần thân của hàm được định nghĩa chỉ dùng hai câu lệnh chứ không phải là bốn.
(((dofour)))((("hàm", "người dùng định nghĩa", "dofour", see="dofour")))

[[ex03-3]]
===== Bài tập 3-4

. Hãy viết một hàm để vẽ ô lưới giống như hình sau đây:
(((printgrid)))((("hàm", "người dùng định nghĩa", "printgrid", see="printgrid")))
+
[source,@julia-repl-test chap03-ex]
----
julia> printgrid()
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - +
----

. Hãy vẽ một lưới tương tự nhưng gồm bốn hàng và bốn cột.

Nguồn: Bài này được dựa theo bài tập của tác giả Oualline, _Practical C Programming_, Third Edition, O’Reilly Media, 1997.

[TIP]
====
Để in ra nhiều giá trị trên cùng một dòng, hãy dùng dấu phẩy để phân cách các chuỗi:

[source,julia]
----
println("+", "-")
----

Hàm +print+ không nhảy đến dòng kế tiếp:

[source,julia]
----
print("+ ")
println("-")
----

Kết quả của hai lệnh trên là +pass:["+ -"]+ trên cùng một dòng. Kết quả của lệnh print tiếp theo sẽ bắt đầu ở dòng kế tiếp.
====
(((println)))(((print)))((("hàm", "Base", "print", see="print")))
