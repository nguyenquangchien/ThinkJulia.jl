[[chap19]]
== Những mặt tốt: cú pháp

Một trong những mục tiêu của tôi khi viết sách này là dạy bạn ít Julia nhất khi có thể. Khi phải đứng trước hai lựa chọn giải quyết vấn đề, tôi chọn một cách và tránh đề cập đến cách kia. Hoặc đôi khi tôi đưa cách thứ hai vào một bài tập.

Bây giờ tôi muốn trở lại vài đặc điểm hay mà tôi đã bỏ qua trước đây. Julia cung cấp nhiều tính năng mà thực ra chưa cần thiết —không có chúng bạn vẫn có thể viết mã lệnh đẹp—nhưng dùng chúng thì đôi khi có thể viết được mã lệnh ngắn gọn, dễ đọc hoặc hiệu quả hơn, và đôi khi được cả ba điều này.

Ở chương này và chương tới, ta thảo luận những vấn đề tôi đã bỏ qua trong các chương trước:

* bổ sung cú pháp
* các hàm, kiểu dữ liệu và macro có ngay trong +Base+
(((Base)))
* các hàm, kiểu dữ liệu và macro có trong
(((Standard Library)))

=== Các cặp được đặt tên 

Bạn có thể đặt tên các thành phần của một cặp, bằng cách này tạo một cặp được đặt tên:

[source,@julia-repl-test]
----
julia> x = (a=1, b=1+1)
(a = 1, b = 2)
julia> x.a
1
----

Với cặp được đặt tên, các trường có thể truy cập theo tên bằng cú pháp dấu chấm +(x.a)+.
(((cặp được đặt tên)))(((cú pháp dấu chấm)))


=== Hàm

Trong Julia, hàm có thể được định nghĩa bằng cú pháp ngắn gọn.

[source,@julia-repl-test]
----
julia> f(x,y) = x + y
f (generic function with 1 method)
----

[[anonymous_functions]]
==== Hàm khuyết danh

Ta có thể định nghĩa một hàm mà không quy định tên cho nó:

[source,@julia-repl-test]
----
julia> x -> x^2 + 2x - 1
#1 (generic function with 1 method)
julia> function (x)
           x^2 + 2x - 1
       end
#3 (generic function with 1 method)
----

Đây là những ví dụ _hàm khuyết danh_. Ta thường dùng hàm khuyết danh làm đối số cho một hàm khác:
(((anonymous function)))(((Plots)))((("module", "Plots", see="Plots")))(((plot)))((("function", "Plots", "plot", see="plot")))

[source,jlcon]
----
julia> using Plots

julia> plot(x -> x^2 + 2x - 1, 0, 10, xlabel="x", ylabel="y")

----

<<fig19-1>> cho thấy kết quả của lệnh vẽ biểu đồ.

[[fig19-1]]
.Plot
image::images/fig191.svg[pdfwidth="10cm"]

==== Đối số từ khóa

Cũng có thể đặt tên các đối số của hàm:

[source,@julia-repl-test]
----
julia> function myplot(x, y; style="solid", width=1, color="black")
           ###
       end
myplot (generic function with 1 method)
julia> myplot(0:10, 0:10, style="dotted", color="blue")

----

_Keyword arguments_ in a function are specified after a semicolon in the signature but can be called with a comma.
(((;)))(((keyword arguments)))

==== Bao đóng (closure)

_Bao đóng_ (closure) là kĩ thuật cho phép một hàm nắm bắt được một biến đã định nghĩa bên ngoài phạm vi gọi của hàm đó.

[source,@julia-repl-test]
----
julia> foo(x) = ()->x
foo (generic function with 1 method)

julia> bar = foo(1)
#1 (generic function with 1 method)

julia> bar()
1
----

Ở ví dụ này, hàm +foo+ trả lại một hàm khuyết danh truy cập tới đối số +x+ của hàm +foo+. +bar+ chỉ đến hàm khuyết danh và trả lại giá trị đối số của +foo+.


=== Khối lệnh

_Khối lệnh_ là một cách để nhóm nhiều câu lệnh với nhau. Khối bắt đầu bằng từ khóa +begin+ và kết thúc với +end+.
(((begin)))((("keyword", "begin", see="begin")))(((end)))(((block)))

Ở <<chap04>> ta đã giới thiệu macro +@svg+:

[source,julia]
----
🐢 = Turtle()
@svg begin
    forward(🐢, 100)
    turn(🐢, -90)
    forward(🐢, 100)
end
----

Ở ví dụ này, macro +@svg+ chỉ có một đối số, tức là một khối nhóm 3 lời gọi hàm lại.

==== Khối +let+

Một khối +let+ rất hứu ích khi ta muốn tạo ra "binding", nghĩa là những vị trí có thể tham chiếu tới các giá trị.

[source,@julia-repl-test]
----
julia> x, y, z = -1, -1, -1;

julia> let x = 1, z
           @show x y z;
       end
x = 1
y = -1
ERROR: UndefVarError: z not defined
julia> @show x y z;
x = -1
y = -1
z = -1
----

Ở ví dụ này, macro +@show+ thứ nhất đã cho thấy biến địa phương +x+, biến toàn cục +y+ và biến địa phương chưa định nghĩa +z+. Các biến toàn cục đều không hề bị động đến.


==== Khối +do+

Trong <<reading_and_writing>> ta đã phải đóng file lại sau khi ghi xong. Có thể thực hiện điều này một cách tự động bằng cách dùng _khối do_:
(((do)))((("keyword", "do", see="do")))

[source,@julia-repl-test chap19]
----
julia> data = "Đây là hàng phên dậu,\nbiểu tượng vùng đất của ta.\n"
"Đây là hàng phên dậu,\nbiểu tượng vùng đất của ta.\n"
julia> open("output.txt", "w") do fout
           write(fout, data)
       end
48
----

Ở ví dụ này, +fout+ là dòng file dùng làm đầu ra.

Cách viết trên có tính năng tương đương với

[source,@julia-repl-test chap19]
----
julia> f = fout -> begin
           write(fout, data)
       end
#3 (generic function with 1 method)
julia> open(f, "output.txt", "w")
48
----

Hàm khuyết danh được dùng làm đối số thứ nhất của hàm +open+:
(((open)))

[source,julia]
----
function open(f::Function, args...)
    io = open(args...)
    try
        f(io)
    finally
        close(io)
    end
end
----

Khối +do+ có thể “nắm” được các biến từ phạm vi bao trùm nó. Chẳng hạn, ở ví dụ trên ta đã nắm được biến +data+ của +open pass:[...] do+ từ phạm vi bên ngoài.


=== Luồng điều khiển

==== Toán tử ba ngôi

_Toán tử ba ngôi_, +?:+, là một dạng khác của câu lệnh +if-elseif+ được dùng khi bạn cần lựa chọn giữa các giá trị biểu thức đơn.
(((?:)))((("operator", "Base", "?:", see="?:")))((("ternary operator", see="?:")))

[source,@julia-repl-test]
----
julia> a = 150
150
julia> a % 2 == 0 ? println("even") : println("odd")
even
----

Biểu thức trước dấu +?+ là một biểu thức điều kiện. Nếu điều kiện này là +true+, thì ta sẽ ước lượng biểu thức trước dấu +:+, còn không thì sẽ ước lượng biểu thức sau dấu +:+.

==== Ước lượng đoản mạch

Các toán tử +&&+ and +||+ đều thực hiện _ước lượng đoản mạch_: một đối số tiếp theo chỉ được ước lượng khi ta cần phải xác định giá trị cuối cùng.
(((&&)))(((||)))(((ước lượng đoản mạch)))

Chẳng hạn, một hàm tính giai thừa theo cách đệ quy có thể được định nghĩa như sau:
(((fact)))

[source,@julia-setup]
----
function fact(n::Integer)
    n >= 0 || error("n phải là số không âm")
    n == 0 && return 1
    n * fact(n-1)
end
----

==== Tác vụ (hay coroutine)

_Tác vụ_ là một cấu trúc điều khiển có thể hợp tác truyền sự điều khiển mà không phải trả lại. Trong Julia, ta có thể thực hiện tác vụ như một hàm với đối số thứ nhất là một đối tượng +Channel+. Một channel ("kênh") được dùng để truyền giá trị từ hàm đến mã lệnh gọi nó.

Bằng một tác vụ, ta có thể phát sinh dãy Fibonnaci.
(((tác vụ)))(((Channel)))((("type", "Base", "Channel", see="Channel")))(((put!)))((("function", "Base", "put!", see="put!")))

[source,@julia-setup chap19]
----
function fib(c::Channel)
    a = 0
    b = 1
    put!(c, a)
    while true
        put!(c, b)
        (a, b) = (b, a+b)
    end
end
----

+put!+ lưu các giá trị trong một đối tượng kênh còn +take!+ đọc các giá trị từ nó:
(((take!)))((("function", "Base", "take!", see="take!")))

[source,@julia-repl-test chap19]
----
julia> fib_gen = Channel(fib);

julia> take!(fib_gen)
0
julia> take!(fib_gen)
1
julia> take!(fib_gen)
1
julia> take!(fib_gen)
2
julia> take!(fib_gen)
3
----

Phương thức dựng (constructor) +Channel+ tạo nên tác vụ. Hàm +fib+ bị treo lại mỗi lần gọi đến +put!+ và sẽ hồi phục sau +take!+. Để đạt hiệu năng tốt, ta nhồi vào đối tượng kênh vài giá trị của dãy trong từng chu kì treo/hồi phục.

Ta cũng có thể dùng một đối tượng kênh làm bộ lặp:

[source,@julia-repl-test chap19]
----
julia> for val in Channel(fib)
           print(val, " ")
           val > 20 && break
       end
0 1 1 2 3 5 8 13 21
----


=== Kiểu dữ liệu

==== Các kiểu sơ cấp

Ta gọi kiểu dữ liệu cụ thể chứa những bit bộ nhớ máy tính là _kiểu sơ cấp_. Không như nhiều ngôn ngữ khác, trong Julia bạn có thể tự định nghĩa ra kiểu sơ cấp. Các kiểu sơ cấp chuẩn cũng được định nghĩa theo cách này:
(((kiểu sơ cấp)))((("từ khóa", "kiểu sơ cấp", see="kiểu sơ cấp")))

[source,julia]
----
primitive type Float64 <: AbstractFloat 64 end
primitive type Bool <: Integer 8 end
primitive type Char <: AbstractChar 32 end
primitive type Int64 <: Signed 64 end
----

Số ghi trong các câu lệnh sẽ quy định xem cần bao nhiêu bit.

Ví dụ tiếp theo tạo nên một kiểu sơ cấp +Byte+ cùng một phương thức dựng constructor:
(((Byte)))((("type", "programmer-defined", "Byte", see="Byte")))

[source,@julia-repl-test]
----
julia> primitive type Byte 8 end

julia> Byte(val::UInt8) = reinterpret(Byte, val)
Byte
julia> b = Byte(0x01)
Byte(0x01)
----

Hàm +reinterpret+ được dùng để lưu giữ các bit của một số nguyên không dấu với 8 bit (+UInt8+) vào trong kiểu byte.
(((reinterpret)))((("function", "Base", "reinterpret", see="reinterpret")))(((UInt8)))((("type", "Base", "UInt8", see="UInt8")))

==== Kiểu tham số

Hệ thống kiểu Julia có tính _tham số_, nghĩa là các kiểu cũng có thể có tham số.

Các tham số kiểu sẽ được giới thiệu sau tên kiểu, trong cặp ngoặc nhọn:
(((ngoặc nhọn)))

[source,@julia-setup chap19]
----
struct Point{T<:Real}
    x::T
    y::T
end
----

Mã lệnh trên định nghĩa một kiểu tham số, +Point{T<:Real}+, trong đó chứa hai "tọa độ" kiểu +T+, vốn có thể nhận bất kì kiểu nào miễn là thuộc kiểu số +Real+.

[source,@julia-repl-test chap19]
----
julia> Point(0.0, 0.0)
Point{Float64}(0.0, 0.0)
----

Ngoài các kiểu phức hợp, các kiểu trừu tượng và kiểu sơ cấp cũng có thể chứa tham số kiểu.

[TIP]
====
Để đạt hiệu năng tính toán, rất cần áp dụng kiểu sơ cấp cho các trường của một cấu trúc (struct). Vì vậy, kiểu +Point+ làm theo cách này sẽ rất nhanh và linh hoạt.
====

==== Hợp kiểu

_Hợp kiểu_ là một kiểu tham số trừu tượng có thể đóng vai trò bất kì kiểu tham số nào của nó:
(((hợp kiểu)))(((Union)))((("type", "Base", "Union", see="Union")))

[source,@julia-repl-test]
----
julia> IntOrString = Union{Int64, String}
Union{Int64, String}
julia> 150 :: IntOrString
150
julia> "Julia" :: IntOrString
"Julia"
----

Hợp kiểu có ở bên trong hầu hết các ngôn ngữ máy tính để giúp suy luận kiểu. Tuy nhiên, Julia lại phơi lộ tính năng này cho người dùng vì khi hợp kiểu chỉ có rất ít kiểu thì có thể tạo mã lệnh rất hiệu quả. Tính năn này giúp lập trình viên Julia có được sự linh hoạt lớn để kiểm soát đa phương thức.

=== Methods

==== Parametric Methods

Method definitions can also have type parameters qualifying their signature:
(((signature)))

[source,@julia-repl-test chap19]
----
julia> isintpoint(p::Point{T}) where {T} = (T === Int64)
isintpoint (generic function with 1 method)
julia> p = Point(1, 2)
Point{Int64}(1, 2)
julia> isintpoint(p)
true
----

==== Function-like Objects

Any arbitrary Julia object can be made “callable”. Such “callable” objects are sometimes called _functors_.
(((functor)))

[source,@julia-setup chap19]
----
struct Polynomial{R}
    coeff::Vector{R}
end

function (p::Polynomial)(x)
    val = p.coeff[end]
    for coeff in p.coeff[end-1:-1:1]
        val = val * x + coeff
    end
    val
end
----

To evaluate the polynomial, we simply have to call it:

[source,@julia-repl-test chap19]
----
julia> p = Polynomial([1,10,100])
Polynomial{Int64}([1, 10, 100])
julia> p(3)
931
----

=== Constructors

Parametric types can be explicitly or implicitly constructed:

[source,@julia-repl-test chap19]
----
julia> Point(1,2)         # implicit T
Point{Int64}(1, 2)
julia> Point{Int64}(1, 2) # explicit T
Point{Int64}(1, 2)
julia> Point(1,2.5)       # implicit T
ERROR: MethodError: no method matching Point(::Int64, ::Float64)
----

Default inner and outer constructors are generated for each +T+:
(((constructor)))

[source,julia]
----
struct Point{T<:Real}
    x::T
    y::T
    Point{T}(x,y) where {T<:Real} = new(x,y)
end

Point(x::T, y::T) where {T<:Real} = Point{T}(x,y);
----

and both +x+ and +y+ have to be of the same type.

When +x+ and +y+ have a different type, the following outer constructor can be defined:

[source,@julia-setup chap19]
----
Point(x::Real, y::Real) = Point(promote(x,y)...);
----

The +promote+ function is detailed in <<promotion>>.
(((promote)))((("function", "Base", "promote", see="promote")))

=== Conversion and Promotion

Julia has a system for promoting arguments to a common type. This is not done automatically but can be easily extended.

==== Conversion

A value can be converted from one type to another:
(((conversion)))(((convert)))((("function", "Base", "convert", see="convert")))

[source,@julia-repl-test]
----
julia> x = 12
12
julia> typeof(x)
Int64
julia> convert(UInt8, x)
0x0c
julia> typeof(ans)
UInt8
----

We can add our own +convert+ methods:
[source,@julia-repl-test chap19]
----
julia> Base.convert(::Type{Point{T}}, x::Array{T, 1}) where {T<:Real} = Point(x...)

julia> convert(Point{Int64}, [1, 2])
Point{Int64}(1, 2)
----

[[promotion]]
==== Promotion

_Promotion_ is the conversion of values of mixed types to a single common type:
(((promotion)))(((promote)))

[source,@julia-repl-test]
----
julia> promote(1, 2.5, 3)
(1.0, 2.5, 3.0)
----

Methods for the +promote+ function are normally not directly defined, but the auxiliary function +promote_rule+ is used to specify the rules for promotion:
(((promote_rule)))((("function", "Base", "promote_rule", see="promote_rule")))

[source,julia]
----
promote_rule(::Type{Float64}, ::Type{Int32}) = Float64
----

=== Metaprogramming

Julia code can be represented as a data structure of the language itself. This allows a program to transform and generate its own code. 

==== Expressions

Every Julia program starts as a string:

[source,@julia-repl-test chap19]
----
julia> prog = "1 + 2"
"1 + 2"
----

The next step is to parse each string into an object called an _expression_, represented by the Julia type +Expr+:
(((expression)))(((Expr)))((("type", "Base", "Expr", see="Expr")))(((parse)))((("function", "Meta", "parse", see="parse")))

[source,@julia-repl-test chap19]
----
julia> ex = Meta.parse(prog)
:(1 + 2)
julia> typeof(ex)
Expr
julia> dump(ex)
Expr
  head: Symbol call
  args: Array{Any}((3,))
    1: Symbol +
    2: Int64 1
    3: Int64 2
----

The +dump+ function displays expr objects with annotations.
(((dump)))

Expressions can be constructed directly by prefixing with +:+ inside parentheses or using a quote block
(((:)))(((quote)))((("keyword", "quote", see="quote")))

[source,@julia-repl-test chap19]
----
julia> ex = quote
           1 + 2
       end;
----

==== +eval+

Julia can evaluate an expression object using +eval+:
(((eval)))((("function", "Core", "eval", see="eval")))

[source,@julia-eval chap19]
----
import Base.eval
----

[source,@julia-repl-test chap19]
----
julia> eval(ex)
3
----

Every module has its own +eval+ function that evaluates expressions in its scope.

[WARNING]
====
When you are using a lot of calls to the function +eval+, often this means that something is wrong. +eval+ is considered “evil”.
====

==== Macros

Macros can include generated code in a program. A _macro_ maps a tuple of +Expr+ objects directly to a compiled expression:
(((macro)))

Here is a simple macro:
(((@containervariable)))((("macro", "programmer-defined", "@containervariable", see="@containervariable")))

[source,@julia-setup chap19]
----
macro containervariable(container, element)
    return esc(:($(Symbol(container,element)) = $container[$element]))
end
----

Macros are called by prefixing their name with the +@+ (at-sign). The macro call +@containervariable letters 1+ is replaced by:
(((@)))

[source,julia]
----
:(letters1 = letters[1])
----

+@macroexpand @containervariable letters 1+  returns this expression which is extremely useful for debugging.
(((@macroexpand)))((("macro", "Base", "@macroexpand", see="@macroexpand")))

This example illustrates how a macro can access the name of its arguments, something a function can’t do. The return expression needs to be “escaped” with +esc+ because it has to be resolved in the macro call environment.
(((esc)))((("function", "Base", "esc", see="esc")))

[NOTE]
====
Why macros?

Macros generate and include fragments of customized code during parse time, thus _before_ the full program is run.
====

==== Generated Functions

The macro +@generated+ creates specialized code for methods depending on the types of the arguments:
(((generated functions)))(((@generated)))((("macro", "Base", "@generated", see="@generated")))

[source,@julia-setup chap19]
----
@generated function square(x)
    println(x)
    :(x * x)
end
----

The body returns a quoted expression like a macro.

For the caller, the _generated function_ behaves as a regular function:

[source,@julia-repl-test chap19]
----
julia> x = square(2); # note: output is from println() statement in the body
Int64
julia> x              # now we print x
4
julia> y = square("spam");
String
julia> y
"spamspam"
----

=== Missing Values

_Missing values_ can be represented via the +missing+ object, which is the singleton instance of the type +Missing+.
(((missing values)))(((missing)))(((Missing)))((("type", "Base", "Missing", see="Missing")))

Arrays can contain missing values:

[source,@julia-repl-test chap19]
----
julia> a = [1, missing]
2-element Array{Union{Missing, Int64},1}:
 1
  missing
----

The element type of such an array is +Union{Missing, T}+, with +T+ the type of the non-missing values.

Reduction functions return +missing+ when called on arrays which contain missing values

[source,@julia-repl-test chap19]
----
julia> sum(a)
missing
----

In this situation, use the +skipmissing+ function to skip missing values:
(((skipmissing)))((("function", "Base", "skipmissing", see="skipmissing")))

[source,@julia-repl-test chap19]
----
julia> sum(skipmissing([1, missing]))
1
----


=== Calling C and Fortran Code

A lot of code is written in C or Fortran. Reusing tested code is often better than writing your own version of an algorithm. Julia can call directly existing C or Fortran libraries using the +ccall+ syntax.
(((ccall)))((("function", "Base", "ccall", see="ccall")))

In <<databases>> we introduced a Julia interface to the GDBM library of database functions. The library is written in C. To close the database a function call to +close(db)+ has to be made:

[source,julia]
----
Base.close(dbm::DBM) = gdbm_close(dbm.handle)

function gdbm_close(handle::Ptr{Cvoid})
    ccall((:gdbm_close, "libgdbm"), Cvoid, (Ptr{Cvoid},), handle)
end
----

A dbm object has a field +handle+ of +Ptr{Cvoid}+ type. This field holds a C pointer that refers to the database. To close the database the C function +gdbm_close+ has to be called having as only argument the C pointer pointing to the database and no return value. Julia does this directly with the +ccall+ function having as arguments:
(((Ptr)))((("type", "Base", "Ptr", see="Ptr")))

* a tuple consisting of a symbol holding the name of the function we want to call: +:gdbm_close+ and the shared library specified as a string: +"libgdm"+,

* the return type: +Cvoid+,

* a tuple of argument types: +(Ptr{Cvoid},)+ and

* the argument values: +handle+.

The complete mapping of the GDBM library can be found as an example in the ThinkJulia sources.

=== Glossary

closure::
Function that captures variables from its defining scope.
(((closure)))

let block::
Block allocating new variable bindings.
(((let block)))

anonymous function::
Function defined without being given a name.
(((anonymous function)))

named tuple::
Tuple with named components.
(((named tuple)))

keyword arguments::
Arguments identified by name instead of only by position.
(((keyword arguments)))

do block::
Syntax construction used to define and call an anonymous function which looks like a normal code block.
(((do block)))

ternary operator::
Control flow operator taking three operands to specify a condition, an expression to be executed when the condition yields +true+ and an expression to be executed when the condition yields +false+.
(((ternary operator)))

short-circuit evaluation::
Evaluation of a boolean operator for which the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression.
(((short-circuit evaluation)))

task (aka coroutine)::
Control flow feature that allows computations to be suspended and resumed in a flexible manner.
(((task)))

primitive type::
Concrete type whose data consists of plain old bits.
(((primitive type)))

type union::
Type which includes as objects all instances of any of its type parameters.
(((type union)))

parametric type::
Type that is parameterized.
(((parametric type)))

functor::
Object with an associated method, so that it is callable.
(((functor)))

conversion::
Conversion allows to convert a value from one type to another.
(((conversion)))

promotion::
Converting values of mixed types to a single common type.
(((promotion)))

expression::
Julia type that holds a language construct.
(((expression)))

macro::
Way to include generated code in the final body of a program.
(((macro)))

generated functions::
Functions capable of generating specialized code depending on the types of the arguments.
(((generated functions)))

missing values::
Instances that represent data points with no value.
(((missing values)))
