[[chap07]]
== Lặp

Chương này nói về lặp, khả năng chạy một khối mã lệnh nhiều lần. Ta đã thấy một hình thức lặp rồi, đó là đệ quy, ở <<recursion>>. Ta cũng thấy một dạng khác, bằng cách dùng vòng +for+, ở <<simple_repetition>>. Trong chương này ta còn thấy thêm một dạng nữa, bằng câu lệnh +while+. Nhưng trước tiên tôi muốn nói thêm đôi điều về phép gán biến.
(((lặp)))(((đệ quy)))(((vòng for)))


=== Phép gán lại

Có thể bạn đã phát hiện thấy rằng, việc gán nhiều giá trị vào cùng một biến là điều hợp lệ. Một phép gán mới làm cho biến hiện tại tham chiếu đến một giá trị mới (và bỏ tham chiếu đến giá trị cũ).

[source,@julia-repl-test chap07]
----
julia> x = 5
5
julia> x = 7
7
----

 Lần đầu tiên khi +x+ được hiển thị, giá trị của nó là 5, và đến lần thứ hai, giá trị là 7.

[[fig07-1]]
.Sơ đồ trạng thái
image::images/fig71.svg[]

<<fig07-1>> cho thấy phép _gán lại_ trông ra sao trong một sơ đồ trạng thái.
(((phép gán lại)))(((sơ đồ trạng thái)))

Đến đây tôi muốn giải đáp một điều dễ gây nhầm lẫn. Vì Julia dùng dấu bằng (+=+) cho một lệnh gán, ta có thể bị cám dỗ bởi cách hiểu một câu lệnh kiểu như +a = b+ là một đẳng thức, tức là cho rằng +a+ và +b+ bằng nhau.
(((lệnh gán)))

Trước hết, đẳng thức là một hệ thức đối xứng còn lệnh gán thì không phải. Chẳng hạn, trong toán học, nếu latexmath:[\(a=7\)] thì latexmath:[\(7=a\)]. Nhưng trong Julia, câu lệnh +a = 7+ thì hợp lệ còn +7 = a+ thì không.

Hơn nữa, trong toán học, một đẳng thức thì có thể luôn đúng hoặc luôn sai. Nếu bây giờ latexmath:[\(a=b\)] thì về sau này latexmath:[\(a\)] sẽ luôn bằng latexmath:[\(b\)]. Trong Julia, một lệnh gán có thể làm cho hai biến bằng nhau, nhưng có thể sẽ không bằng nhau mãi:

[source,@julia-repl-test]
----
julia> a = 5
5
julia> b = a    # bây giờ a và b bằng nhau
5
julia> a = 3    # a và b không còn bằng nhau 
3
julia> b
5
----

Dòng lệnh thứ ba thay đổi giá trị của +a+ nhưng không thay đổi giá trị của +b+, vì vậy chúng không còn bằng nhau.

[WARNING]
====
Mặc dù việc gán nhiều lần thường có ích, song bạn cần cẩn thận khi sử dụng chúng. Việc giá trị của các biến thay đổi thường xuyên có thể làm cho mã lệnh trở nên khó đọc và khó gỡ lỗi.

Sẽ không hợp lệ nếu ta định nghĩa một hàm trùng tên với một biến đã định nghĩa trước đó.
====


=== Cập nhật các biến

Một trong các dạng thông dụng nhất của gán nhiều lần là một lệnh cập nhật, trong đó giá trị mới của biến phụ thuộc vào giá trị cũ.
(((cập nhật)))

[source,@julia-repl-test chap07]
----
julia> x = x + 1
8
----

Lệnh này có nghĩa là “lấy giá trị hiện thời của +x+, cộng thêm một, và cập nhật +x+ với giá trị mới”.

Nếu bạn thử cập nhật một biến mà hiện không tồn tại, bạn sẽ bị báo lỗi, vì Julia luôn ước lượng vế phải trước khi gán một giá trị cho +x+:
(((UndefVarError)))

[source,@julia-repl-test]
----
julia> y = y + 1
ERROR: UndefVarError: y not defined
----

Trước khi có thể cập nhật một biến, bạn cần phải khởi tạo nó, thường là bằng một lệnh gán:
(((khởi tạo)))

[source,@julia-repl-test]
----
julia> y = 0
0
julia> y = y + 1
1
----

Việc cập nhật một biến bằng cách cộng thêm 1 được gọi là _tăng_; còn trừ đi 1 được gọi là _giảm_.
(((tăng)))(((giảm)))


=== Câu lệnh +while+

Máy tính thường được dùng để tự động hoá các tác vụ có tính chất lặp lại. Việc lặp lại những thao tác giống hệt hoặc tương tự nhau mà không mắc phải lỗi chính là “sở trường” của máy tính đồng thời là việc mà con người làm rất dở. Trong chương trình máy tính, việc thực hiện nhiều lần còn được gọi là _lặp_.
(((lặp)))

Ta đã thấy hai hàm, +countdown+ và +printn+, trong đó dùng đệ quy để thực hiện thao tác lặp.  Vì lặp là một thao tác thường dùng, nên Julia có cung cấp một số đặc điểm ngôn ngữ giúp cho việc thực hiện được dễ dàng. Một trong số đó là lệnh +for+  mà chúng ta đã gặp ở <<simple_repetition>>. Chúng ta sẽ trở lại đó vào một dịp khác.
(((đệ quy)))(((lệnh for)))

Một cách khác là dùng _câu lệnh_ +while+. Sau đây là một phiên bản của+countdown+ có dùng lệnh +while+:
(((while)))((("từ khóa", "while", see="while")))(((while, câu lệnh)))((("câu lệnh", "while", see="while, câu lệnh")))

[source,@julia-setup]
----
function countdown(n)
    while n > 0
        print(n, " ")
        n = n - 1
    end
    println("Bùm!")
end
----

Bạn gần như có thể đọc lệnh +while+ giống cách đọc tiếng Anh: “Khi +n+ còn lớn hơn 0, hãy hiển thị giá trị của +n+ rồi giảm giá trị của +n+ đi 1. Khi đạt đến 0, hãy hiển thị chữ Bùm!”
(((đếm ngược)))

Nói một cách hệ thống hơn, luồng thực hiện của câu lệnh +while+ như sau:
(((luồng thực thi)))

. Xác địh điều kiện xem là true hay false.

. Nếu là false, thoát khỏi lệnh while rồi thực hiện câu lệnh kế tiếp.

. Nếu điều kiện được thoả mãn (true), thực hiện phần thân và quay trở lại bước 1.

Dạng luồng thực hiện này được gọi là một vòng lặp vì sau bước thứ 3 quay trở về bước đầu tiên.
(((vòng lặp)))

Phần thân của vòng lặp sẽ thay đổi giá trị của một hoặc nhiều biến sao cho cuối cùng thì điều kiện sẽ không thoả mãn và vòng lặp kết thúc. Còn nếu không thì vòng lặp sẽ tiếp diễn mãi mãi, và được gọi là một _vòng lặp vô hạn_. Một câu chuyện đùa về nhà khoa học máy tính xuất phát từ việc quan sát thấy dòng chữ trên hướng dẫn sử dụng lọ dầu gội đầu: “Lather, rinse, repeat”, (Xoa dầu, xối nước và lặp lại) là một vòng lặp vô hạn.
(((vòng lặp vô hạn)))

Trong trường hợp +countdown+, ta có thể chứng tỏ rằng vòng lặp sẽ kết thúc vì biết rằng giá trị của +n+ là hữu hạn, và mỗi khi lặp lại thì giá trị của +n+ sẽ nhỏ đi. Vì vậy cuối cùng nó sẽ phải trở về 0. Với các trường hợp khác, có thể sẽ không dễ chứng tỏ điều đó:

Với các trường hợp khác, có thể sẽ không dễ chứng tỏ điều đó. Chẳng hạn:
(((seq)))((("hàm", "tự định nghĩa", "seq", see="seq")))

[source,@julia-setup]
----
function seq(n)
    while n != 1
        println(n)
        if n % 2 == 0        # n chẵn
            n = n / 2
        else                 # n lẻ
            n = n*3 + 1
        end
    end
end
----

Điều kện cho vòng lặp này là +n != 1+, vì vậy vòng lặp sẽ tiếp tục đến khi +n+ bằng 1, khi đó điều kiện sẽ bị vi phạm.

Mỗi lần lặp, chương trình sẽ in ra giá trị của +n+ và kiểm tra xem nó là chẵn hay lẻ. Nếu là chẵn, +n+ được đem chia cho 2. Nếu lẻ giá trị của +n+ được thay thế bởi +pass:[n*3 + 1]+. Chẳng hạn, nếu tham biến được truyền cho dãy là 3, thì chuỗi số thu được cho +n+ sẽ là 3, 10, 5, 16, 8, 4, 2, 1.

Vì +n+ đôi khi tăng và đôi khi giảm, nên không có một chứng minh rõ ràng nào cho thấy +n+ sẽ đạt được giá trị 1, hay là chương trình kết thúc. Với một số giá trị riêng của +n+, ta có thể chứng minh sự kết thúc này. Chẳng hạn, nếu giá trị ban đầu là một số lũy thừa của 2 thì giá trị của +n+ sẽ là chẵn trong mỗi lần lặp và đến khi nó đạt bằng 1. Ở ví dụ trước đây, chuỗi cũng kết thúc theo cách tương tự kể từ số 16.

Câu hỏi được đặt ra là liệu ta có thể chứng minh rằng chương trình sẽ kết thúc với mọi giá trị dương của +n+ hay không. Cho đến giờ, chưa ai có đủ khả năng chứng minh hoặc bác bỏ nó! (Xem https://en.wikipedia.org/wiki/Collatz_conjecture.)
(((Collatz, phỏng đoán)))

===== Bài tập 7-1

Viết lại hàm +printn+ ở <<recursion>> dùng cách lặp thay vì đệ quy.


=== +break+

Đôi khi bạn chỉ biết được rằng đã đến lúc kết thúc vòng lặp trong khi đang thực hiện một nửa phần thân của vòng lặp đó. Trường hợp này bạn có thể dùng _câu lệnh break_ để thoát khỏi vòng lặp.
(((break)))((("từ khóa", "break", see="break")))(((break, câu lệnh)))((("câu lệnh", "break", see="break, câu lệnh")))

Chẳng hạn, giả sử như bạn muốn nhận dữ liệu nhập vào bởi người dùng cho đến lúc họ gõ xong. Bạn có thể viết như sau:
(((readline)))

[source,julia]
----
while true
    print("> ")
    line = readline()
    if line == "xong"
        break
    end
    println(line)
end
println("Xong!")
----

Điều kiện lặp là +true+, tức là luôn đúng, vì vậy vòng lặp tiếp diễn đến khi nó gặp phải lệnh break.

Ở mỗi lần lặp, nó nhắc người dùng bằng cách hiện ra kí hiệu ’>’. Nếu người dùng gõ vào chữ +xong+, lệnh break sẽ giúp thoát khỏi vòng lặp. Còn không thì chương trình sẽ hiện lại bất cứ dòng chữ gì người dùng đã nhập vào, rồi trở lại đầu vòng lặp. Sau đây là một lần chạy thử:

[source]
----
> chưa xong
chưa xong
> xong
Xong!
----

Cách viết vòng lặp while như thế này rất thường gặp vì bạn có thể kiểm tra điều kiện ở bất kì nơi nào trong vòng lặp (chứ không riêng ở đầu vòng lặp) và có thể khẳng định điều kiện dừng lặp (“hãy dừng ngay khi điều này xảy ra”) thay vì chỉ nói một cách phủ định (“cứ tiếp tục đến khi điều đó xảy ra”).


=== +continue+

Lệnh break thoát khỏi vòng lặp. Khi gặp một _lệnh continue_ trong vòng lặp, quyền điều khiển sẽ nhảy đến đầu vòng trong lần lặp kế tiếp, bỏ qua không thực thi tất thảy mã lệnh còn lại trong phần thân lần lặp hiện thời. Chẳng hạn:
(((continue)))((("từ khóa", "continue", see="continue")))(((continue, câu lệnh)))((("câu lệnh", "continue", see="continue, câu lệnh")))

[source,@julia]
----
for i in 1:10
    if i % 3 == 0
        continue
    end
    print(i, " ")
end
----

Nếu +i+ chia hết cho 3, câu lệnh continue sẽ dừng lần lặ hiện thời và bắt đầu lần lặp kế tiếp. Chỉ những số nào chia hết cho 3 trong khoảng từ 1 đến 10 mới được in ra.

[[square_roots]]
=== Căn bậc hai

ác vòng lặp thường được dùng trong những chương trình ở đó có tính các trị số bằng cách bắt đầu với một ước lượng rồi liên lục tính lặp để có được xấp xỉ tốt hơn.

Chẳng hạn, một cách tính căn bậc hai là phương pháp Newton. Giả sử bạn muốn tính căn bậc hai của latexmath:[\(a\)]. Nếu bạn bắt đầu với một giá trị ước lượng bất kì, latexmath:[\(x\)], bạn có thể tính ra một ước lượng khác tốt hơn theo công thức:
(((phương pháp Newton)))

[latexmath]
++++
\begin{equation}
{y = \frac{1}{2}\left(x + \frac{a}{x}\right)}
\end{equation}
++++
Chẳng hạn, nếu latexmath:[\(a\)] bằng 4 và latexmath:[\(x\)] bằng 3:

[source,@julia-repl-test chap07]
----
julia> a = 4
4
julia> x = 3
3
julia> y = (x + a/x) / 2
2.1666666666666665
----

Kết quả đã sát hơn đáp số đúng (latexmath:[\(\sqrt 4 = 2\)]). Nếu ta tiếp tục lặp lại quá trình này bằng giá trị ước lượng mới, kết quả thu được còn gần đúng nữa:

[source,@julia-repl-test chap07]
----
julia> x = y
2.1666666666666665
julia> y = (x + a/x) / 2
2.0064102564102564
----

Sau một số lần cập nhật, kết quả ước lượng sẽ gần như chính xác:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0064102564102564
julia> y = (x + a/x) / 2
2.0000102400262145
julia> x = y
2.0000102400262145
julia> y = (x + a/x) / 2
2.0000000000262146
----

Nhìn chung ta không thể nói trước rằng sẽ cần tính lặp bao nhiêu lần để thu được kết quả đúng, nhưng ta biết rằng khi ta tiến đến giá trị đúng thì các giá trị ước lượng tìm được sẽ không còn dao động nữa:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0000000000262146
julia> y = (x + a/x) / 2
2.0
julia> x = y
2.0
julia> y = (x + a/x) / 2
2.0
----

Khi +y == x+, ta có thể dừng lại. Sau đây là một vòng lặp bắt đầu bằng một giá trị ước lượng, +x+, và sau đó điều chỉnh nó đến khi giá trị này ngừng dao động:

[source,julia]
----
while true
    println(x)
    y = (x + a/x) / 2
    if y == x
        break
    end
    x = y
end
----

Với phần lớn các giá trị của +a+ cách làm này khá hiệu quả, nhưng nói chung việc kiểm tra điều kiện bằng nhau giữa hai số thập phân float là nguy hiểm. Các giá trị số có phần thập phân chỉ gần đúng: hầu hết các số hữu tỉ, như latexmath:[\(\frac{1}{3}\)], và số vô tỉ, như latexmath:[\(\sqrt 2\)], đều không thể biểu diễn được chính xác dưới dạng +Float64+.

Thay vì kiểm tra xem +x+ và +y+ có đúng bằng nhau không, cách làm an toàn hơn là dùng hàm có sẵn +abs+ để tính giá trị tuyệt đối, hay độ lớn của hiệu giữa hai số này:
(((abs)))

[source,julia]
----
if abs(y-x) < ε
    break
end
----

trong đó +ε+ (*+\varepsilon TAB+*) nhận một giá trị như +0.0000001+ tùy thuộc vào yêu cầu độ chính xác mà ta cần là bao nhiêu.


=== Thuật toán

Phương pháp Newton là ví dụ cho một _thuật toán_: đó là một quá trình, một cơ chế để giải một lớp các bài toán (trong trường hợp này là bài toán tính căn bậc hai).
(((algorithm)))

Để hiểu thuật toán là gì, có lẽ sẽ tiện hơn nếu ta sẽ xét một thứ không phải là thuật toán. Khi bạn học cách nhân hai chữ số với nhau, có thể bạn đã thuộc lòng bảng cửu chương. Như vậy bạn đã ghi nhớ được 100 kết quả phép tính riêng biệt. Những kiến thức như vậy không phải là thuật toán.

Nhưng nếu “lười biếng”, bạn có thể dùng mẹo để tính nhẩm. Chẳng hạn, để tìm tích số giữa latexmath:[\(n\)] và 9, bạn có thể viết chữ số đầu là latexmath:[\(n-1\)] và chữ số sau là latexmath:[\(10-n\)]. Mẹo này cho lời giải tổng quát với mọi phép tính giữa số có một chữ số với 9. Đó chính là thuật toán!

Tương tự, kĩ thuật mà bạn đã được học như phép cộng / trừ có nhớ, phép chia có nhớ đều là các thuật toán. Một trong những thuộc tính của thuật toán là để thực hiện chúng thì không cần trí thông minh. Đó là những quá trình trong đó gồm các bước nối tiếp nhau dựa trên một số quy luật đơn giản.

Thực hiện thuật toán thì nhàm chán, song việc thiết kế các thuật toán lại thú vị, đầy thách thức trí tuệ, và là phần trọng tâm của khoa học máy tính.

Có những việc mà chúng ta làm một cách tự nhiên, chẳng chút khó khăn hay phải nghĩ ngợi gì, lại chính là những điều khó diễn giải thành thuật toán nhất. Một ví dụ điển hình là việc hiểu ngôn ngữ tự nhiên. Tất cả chúng ta đều có khả năng này, nhưng đến nay chưa ai giải thích được là _bằng cách nào_ mà chúng ta hiểu nó, ít nhất là giải thích không cần dưới hình thức một thuật toán.


=== Gỡ lỗi

Khi bạn bắt đầu viết những chương trình lớn, bạn có thể sẽ phải dành nhiều thời gian hơn để gỡ lỗi. Nhiều dòng mã lệnh đồng nghĩa với nhiều khả năng mắc lỗi và nhiều chỗ dễ phát sinh ra lỗi hơn.
(((gỡ lỗi)))

Một cách cắt giảm thời gian gỡ lỗi là “phân đôi”. Chẳng hạn, nếu chương trình của bạn có 100 dòng lệnh và nếu bạn cần kiểm tra lần lượt từng dòng một sẽ mất 100 bước.
(((gỡ lỗi bằng phân đôi)))

Thay vì vậy, hãy thử chia đôi bài toán. Nhìn vào khu vực giữa của chương trình, kiếm lấy một giá trị trung gian mà bạn có thể kiểm tra được. Thêm vào một câu lệnh print (hoặc là một cách nào khác để tạo ra một hiệu ứng giúp ta kiểm tra) rồi chạy chương trình.
(((lệnh print)))

Nếu lần kiểm tra ở điểm giữa này mà không đạt, thì chắc chắn nửa đầu chương trình sẽ chứa lỗi. Nếu đạt, thì lỗi nằm ở nửa sau chương trình.

Mỗi khi kiểm tra như thế này, bạn đã chia nửa số dòng lệnh cần thiết phải tìm kiếm. Ít nhất là vết mặt lý thuyết thì sau sáu bước (tức là ít hơn 100), bạn sẽ có thể giảm số dòng lệnh cần kiểm tra xuống còn 1 đến 2 dòng mà thôi.

Trên thực tế, “điểm giữa của chương trình” thường không rõ ràng và đôi khi ta không thể kiểm tra được ở đó. Vì vậy việc đếm số dòng và tìm chính xác điểm giữa là vô nghĩa. Thay vào đó, hãy nghĩ đến những chỗ trong chương trình mà có nhiều khả năng xảy ra lỗi và những chỗ dễ dàng đặt kiểm tra. Sau đó chọn một chỗ kiểm tra mà bạn nghĩ khả năng xảy ra lỗi trước và sau điểm đó là ngang nhau.


=== Thuật ngữ

phép gán lại::
Phép gán giá trị mới cho một biến đã tồn tại.
(((phép gán lại)))

cập nhật::
Phép gán trong đó giá trị mới của biến phụ thuộc vào giá trị cũ.
(((cập nhật)))

khởi tạo::
Phép gán đưa một giá trị ban đầu vào cho một biến sẽ được cập nhật.
(((khởi tạo)))

tăng::
Việc cập nhật bằng cách cộng thêm vào giá trị sẵn có của một biến (thường là thêm 1).
(((tăng)))

giảm::
Việc cập nhật bằng cách bớt đi giá trị sẵn có của một biến.
(((giảm)))

lặp::
Việc thực hiện liên tục nhiều lần một nhóm các lệnh bằng cách gọi hàm đệ quy hoặc một vòng lặp.
(((lặp)))

câu lệnh while::
Câu lệnh cho phép lặp được kiểm soát bởi một điều kiện.
(((câu lệnh while)))

câu lệnh break::
Câu lệnh cho phép nhảy ra ngoài vòng lặp.
(((câu lệnh break)))

câu lệnh continue::
Câu lệnh bên trong vòng lặp để nhảy đến đầu vòng lặp của lần lặp kế tiếp.
(((câu lệnh continue)))

vòng lặp vô hạn::
Một vòng lặp trong đó điều kiện kết thúc không bao giờ được thỏa mãn.
(((vòng lặp vô hạn)))

thuật toán::
Quy trình tổng quát để giải một thể loại bài toán nhất định.
(((thuật toán)))


=== Bài tập

[[ex07-1]]
===== Bài tập 7-2

Sao chép vòng lặp từ <<square_roots>> rồi bao gói nó trong một hàm có tên +mysqrt+; hàm này nhận một tham số +a+, rồi chọn một giá trị hợp lý của +x+, và trả lại trị số ước tính căn bậc hai của +a+.
(((mysqrt)))((("hàm", "tự định nghĩa", "mysqrt", see="mysqrt")))

Để kiểm tra nó, hãy viết một hàm có tên +testsquareroot+ nhằm in ra một bảng như sau:
(((testsquareroot)))((("hàm", "tự định nghĩa", "testsquareroot", see="testsquareroot")))

[source,@julia-eval]
----
using ThinkJulia
io = IOBuffer()
testsquareroot(io)
out = String(take!(io))
println(out)
----

Cột đâu tiên có chứa một số, +a+; cột thứ hai là căn bậc hai của +a+ được tính bằng +mysqrt+; cột thứ ba là căn bậc hai được tính bằng +sqrt+; cột thứ tư là giá trị tuyệt đối của chênh lệch giữa hai kết quả tính được theo hai cách trên.

[[ex07-2]]
===== Bài tập 7-3

Hàm dựng sẵn +Meta.parse+ nhận vào một chuỗi rồi quy đổi chuỗi này thành một biểu thức. Trong Julia, có thể dùng hàm +Core.eval+ để ước lượng biểu thức đó. Chẳng hạn:
(((parse)))((("hàm", "Meta", "parse", see="parse")))(((eval)))((("hàm", "Core", "eval", see="eval")))

[source,@julia-eval chap07]
----
import Base.eval
----

[source,@julia-repl-test chap07]
----
julia> expr = Meta.parse("1+2*3")
:(1 + 2 * 3)
julia> eval(expr)
7
julia> expr = Meta.parse("sqrt(π)")
:(sqrt(π))
julia> eval(expr)
1.7724538509055159
----

Hãy viết một hàm tên là +evalloop+ để lặp lại các thao tác nhắc người dùng nhập vào chuỗi biểu thức, định giá trị nó bằng +eval+, và sau đó in ra kết quả. Vòng lặp cần tiếp tục đến tận khi người dùng nhập vào +done+, và kết thúc bằng việc trả lại giá trị của biểu thức được định giá trị sau cùng.

(((evalloop)))((("hàm", "tự định nghĩa", "evalloop", see="evalloop")))

[[ex07-3]]
===== Bài tập 7-4

Nhà toán học xuất sắc Srinivasa Ramanujan đã tìm ra một chuỗi số vô tận có thể được dùng để phát sinh ra một giá trị xấp xỉ cho số latexmath:[\(\frac{1}{\pi}\)]:

[latexmath]
++++
\begin{equation}
{\frac{1}{\pi}=\frac{2\sqrt2}{9801}\sum_{k=0}^\infty\frac{(4k)!(1103+26390k)}{(k!)^4 396^{4k}}}
\end{equation}
++++

Hãy viết một hàm tên là +estimatepi+ dùng công thức này để tính và trả lại giá trị xấp xỉ của π. Hãy dùng một vòng lặp while để tính các số hạng trong tổng đến khi số hạng cuối cùng nhỏ hơn +1e-15+ (vốn là cách biểu diễn của Julia cho latexmath:[\(10^{-15}\)]). Bạn có thể kiểm tra kết quả tính được bằng cách so sánh nó với +π+.
(((estimatepi)))((("hàm", "tự định nghĩa", "estimatepi", see="estimatepi")))
